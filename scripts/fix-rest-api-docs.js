// This script fixes the resulting MDX files generated by the OpenAPI docs plugin
// to be able to render correctly in Docusaurus.
const fs = require('fs');
const path = require('path');
const prettier = require('prettier');

const apiDir = './docs/apis/rest';

// Fix opening and closing XML tags
function fixXmlEncoding(content) {
  return content.replace(/&gt;/g, '>').replace(/&lt;/g, '<');
}

// Strip p tags from description field in frontmatter
function stripPTags(content) {
  const parts = content.split('---');
  if (parts.length < 3) return content;

  const frontmatterLines = parts[1].split('\n');

  const newLines = frontmatterLines.map((line) => {
    if (line.startsWith('description:')) {
      const match = line.match(/description:\s*(['"])(.*?)\1/);
      if (!match) return line;

      const [_, quote, text] = match;
      const cleanText = text
        .replace(/<p>/g, '')
        .replace(/<\/p>/g, '')
        .replace(/<a[^>]*>(.*?)<\/a>/g, '$1');
      return `description: ${quote}${cleanText}${quote}`;
    }
    return line;
  });

  parts[1] = newLines.join('\n');
  return parts.join('---');
}

// Fix lists indentation
// Fix code blocks ending with a space
async function formatMDX(content) {
  try {
    return await prettier.format(content, {
      parser: 'mdx',
      printWidth: 100,
      tabWidth: 2,
      useTabs: false,
      semi: true,
      singleQuote: true,
      trailingComma: 'es5',
      bracketSpacing: true,
      bracketSameLine: false,
      arrowParens: 'avoid'
    });
  } catch (error) {
    console.error('Error formatting MDX:', error);
    return content;
  }
}

// Transform schema definitions into markdown tables
function transformSchemaDefinitions(content) {
  return content.replace(
    /<SchemaDefinition[^>]*schemaRef="#\/components\/schemas\/([^"]+)"[^>]*>/g,
    (_, schemaName) => {
      return `
<details open className="embedded-schema">
<summary><strong>${schemaName} Schema</strong> - <a href="../schemas/${schemaName.toLowerCase()}">View full schema</a></summary>

import ${schemaName}Schema from './schemas/${schemaName.toLowerCase()}.schema.mdx';

{/* Hide the title when embedded */}
<${schemaName}Schema hideTitle={true} />

</details>
`;
    }
  );
}

async function processFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let fixedContent = fixXmlEncoding(content);
    fixedContent = stripPTags(fixedContent);
    fixedContent = transformSchemaDefinitions(fixedContent);
    fixedContent = await formatMDX(fixedContent);
    fs.writeFileSync(filePath, fixedContent);
    console.log(`Processed: ${filePath}`);
  } catch (error) {
    console.error(`Error processing ${filePath}:`, error);
  }
}

async function processDirectory(directory) {
  const files = fs.readdirSync(directory);

  for (const file of files) {
    const filePath = path.join(directory, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      await processDirectory(filePath);
    } else if (file.endsWith('.mdx')) {
      await processFile(filePath);
    }
  }
}

console.log('Post-processing OpenAPI docs in .mdx format...');
processDirectory(apiDir).then(() => {
  console.log('Finished post-processing OpenAPI docs.');
});
