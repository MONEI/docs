{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "MONEI API v1",
    "description": "The MONEI API is organized around [REST](https://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs. <br/><br/> **Base URL:** https://api.monei.com/v1 <br/><br/> **Client libraries:** <ul>\n  <li><a target=\"_blank\" href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li>\n  <li><a target=\"_blank\" href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li>\n  <li><a target=\"_blank\" href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li>\n</ul>"
  },
  "servers": [
    {
      "url": "https://api.monei.com/v1",
      "description": "MONEI API v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "APIKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "The MONEI API uses API key to authenticate requests. You can view and manage your API key in the [MONEI Dashboard](https://dashboard.monei.com/settings/api). <br/><br/> Test mode private keys have the prefix `pk_test_` and live mode private keys have the prefix `pk_live_`. <br/><br/> Your API key carries many privileges, so be sure to keep them secure! Do not share your secret API key in publicly accessible areas such as GitHub, client-side code, and so forth. <br/><br/> Include your API Key as an `Authorization` header in all MONEI API requests. <br/><br/> All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail."
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request is incorrect or could not be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized error. Please check your auth credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Payment": {
        "description": "A payment object along with the `nextAction` attribute",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Country": {
        "type": "string",
        "example": "ES",
        "description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
      },
      "IP": {
        "type": "string",
        "example": "100.100.200.100",
        "description": "The IP address where the operation originated."
      },
      "Lang": {
        "type": "string",
        "example": "es",
        "description": "Two-letter language code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1))."
      },
      "DeviceType": {
        "type": "string",
        "example": "desktop",
        "description": "Device type, could be `desktop`, `mobile`, `smartTV`, `tablet`."
      },
      "DeviceModel": {
        "type": "string",
        "example": null,
        "description": "Information about the device used for the browser session (e.g., `iPhone`)."
      },
      "Browser": {
        "type": "string",
        "example": "Chrome",
        "description": "The browser used in this browser session (e.g., `Mobile Safari`)."
      },
      "BrowserVersion": {
        "type": "string",
        "example": "83.0.4103.116",
        "description": "The version for the browser session (e.g., `13.1.1`)."
      },
      "Os": {
        "type": "string",
        "example": "Mac OS",
        "description": "Operation system (e.g., `iOS`)."
      },
      "OsVersion": {
        "type": "string",
        "example": "10.15.4",
        "description": "Operation system version (e.g., `13.5.1`)."
      },
      "Source": {
        "type": "string",
        "example": "MONEI/PHP",
        "description": "The source component from where the operation was generated (mostly for our SDK's)."
      },
      "SourceVersion": {
        "type": "string",
        "example": "0.1.2",
        "description": "The source component version from where the operation was generated (mostly for our SDK's)."
      },
      "UserAgent": {
        "type": "string",
        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...",
        "description": "Full user agent string of the browser session."
      },
      "CreatedAt": {
        "type": "integer",
        "format": "int64",
        "example": null,
        "description": "Time at which the resource was created. Measured in seconds since the Unix epoch."
      },
      "UpdatedAt": {
        "type": "integer",
        "format": "int64",
        "example": null,
        "description": "Time at which the resource updated last time. Measured in seconds since the Unix epoch."
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "city": {
            "type": "string",
            "example": "Málaga",
            "description": "City, district, suburb, town, or village."
          },
          "line1": {
            "type": "string",
            "example": "Fake Street 123",
            "description": "Address line 1 (e.g., street, PO Box, or company name)."
          },
          "line2": {
            "type": "string",
            "example": null,
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "zip": {
            "type": "string",
            "example": "1234",
            "description": "ZIP or postal code."
          },
          "state": {
            "type": "string",
            "example": "Málaga",
            "description": "State, county, province, or region."
          }
        }
      },
      "CardholderName": {
        "type": "string",
        "example": "John Doe",
        "description": "The cardholder's name, as stated in the credit card."
      },
      "CardholderEmail": {
        "type": "string",
        "example": "john.doe@monei.com",
        "description": "The cardholder's email address."
      },
      "Card": {
        "title": "Card",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The card number, as a string without any separators."
          },
          "cvc": {
            "type": "string",
            "description": "Card security code."
          },
          "expMonth": {
            "type": "string",
            "description": "Two-digit number representing the card’s expiration month."
          },
          "expYear": {
            "type": "string",
            "description": "Two-digit number representing the card’s expiration year."
          },
          "cardholderName": {
            "$ref": "#/components/schemas/CardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/CardholderEmail"
          }
        }
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "accountId": {
            "$ref": "#/components/schemas/Payment-AccountId"
          },
          "authorizationCode": {
            "$ref": "#/components/schemas/Payment-AuthorizationCode"
          },
          "livemode": {
            "$ref": "#/components/schemas/Payment-Livemode"
          },
          "status": {
            "$ref": "#/components/schemas/Payment-Status"
          },
          "statusCode": {
            "$ref": "#/components/schemas/Payment-StatusCode"
          },
          "statusMessage": {
            "$ref": "#/components/schemas/Payment-StatusMessage"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/Payment-PaymentToken"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Payment-PaymentMethod"
          },
          "shop": {
            "$ref": "#/components/schemas/Payment-Shop"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/Payment-RefundedAmount"
          },
          "lastRefundAmount": {
            "$ref": "#/components/schemas/Payment-LastRefundAmount"
          },
          "lastRefundReason": {
            "$ref": "#/components/schemas/Payment-LastRefundReason"
          },
          "cancellationReason": {
            "$ref": "#/components/schemas/Payment-CancellationReason"
          },
          "sessionDetails": {
            "$ref": "#/components/schemas/Payment-SessionDetails"
          },
          "traceDetails": {
            "$ref": "#/components/schemas/Payment-TraceDetails"
          },
          "nextAction": {
            "$ref": "#/components/schemas/Payment-NextAction"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "CreatePaymentRequest": {
        "title": "CreatePaymentRequest",
        "type": "object",
        "required": [
          "amount",
          "currency",
          "orderId",
          "completeUrl",
          "callbackUrl"
        ],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Payment-CallbackUrl"
          },
          "completeUrl": {
            "$ref": "#/components/schemas/Payment-CompleteUrl"
          },
          "failUrl": {
            "$ref": "#/components/schemas/Payment-FailUrl"
          },
          "cancelUrl": {
            "$ref": "#/components/schemas/Payment-CancelUrl"
          },
          "paymentToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-PaymentToken"
              }
            ],
            "description": "A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method). In case of the first one, you will also need to send the `sessionId` used to generate the token in the first place."
          },
          "sessionId": {
            "$ref": "#/components/schemas/Payment-SessionId"
          },
          "generatePaymentToken": {
            "$ref": "#/components/schemas/Payment-GeneratePaymentToken"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Payment-PaymentMethodInput"
          },
          "allowedPaymentMethods": {
            "$ref": "#/components/schemas/Payment-PaymentMethods"
          },
          "transactionType": {
            "$ref": "#/components/schemas/Payment-TransactionType"
          },
          "sequence": {
            "$ref": "#/components/schemas/Payment-Sequence"
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "sessionDetails": {
            "$ref": "#/components/schemas/Payment-SessionDetails"
          }
        }
      },
      "ConfirmPaymentRequest": {
        "title": "ConfirmPaymentRequest",
        "type": "object",
        "required": [
          "paymentToken"
        ],
        "properties": {
          "paymentToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-PaymentToken"
              }
            ],
            "description": "A payment token generated by monei.js [Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken [saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method)."
          },
          "paymentMethod": {
            "type": "object",
            "description": "Additional information about the payment method used for this payment.",
            "properties": {
              "card": {
                "type": "object",
                "description": "Additional information about the card used for this payment.",
                "properties": {
                  "cardholderName": {
                    "$ref": "#/components/schemas/CardholderName"
                  },
                  "cardholderEmail": {
                    "$ref": "#/components/schemas/CardholderEmail"
                  }
                }
              }
            }
          },
          "generatePaymentToken": {
            "$ref": "#/components/schemas/Payment-GeneratePaymentToken"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          }
        }
      },
      "CapturePaymentRequest": {
        "title": "CapturePaymentRequest",
        "type": "object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded."
          }
        }
      },
      "CancelPaymentRequest": {
        "title": "CancelPaymentRequest",
        "type": "object",
        "properties": {
          "cancellationReason": {
            "$ref": "#/components/schemas/Payment-CancellationReason"
          }
        }
      },
      "RefundPaymentRequest": {
        "title": "RefundPaymentRequest",
        "type": "object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to refund, which must be less than or equal to the original amount."
          },
          "refundReason": {
            "$ref": "#/components/schemas/Payment-RefundReason"
          }
        }
      },
      "RecurringPaymentRequest": {
        "title": "RecurringPaymentRequest",
        "type": "object",
        "required": [
          "orderId"
        ],
        "properties": {
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to collected by this subsequent payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD)."
          },
          "transactionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-TransactionType"
              }
            ],
            "default": "(same from initial payment)",
            "description": "Same as the `transactionType` parameter from [create payment](https://docs.monei.com/api/#operation/payments_create). If not sent, it will default in the same transaction type used in the initial payment."
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Payment-CallbackUrl"
          }
        }
      },
      "Payment-Id": {
        "type": "string",
        "example": "af6029f80f5fc73a8ad2753eea0b1be0",
        "description": "Unique identifier for the payment."
      },
      "Payment-Amount": {
        "type": "integer",
        "format": "int32",
        "example": 110,
        "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge 1.00 USD)."
      },
      "Payment-Currency": {
        "type": "string",
        "example": "EUR",
        "description": "Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217), in uppercase. Must be a supported currency."
      },
      "Payment-OrderId": {
        "type": "string",
        "example": "14379133960355",
        "description": "An order ID from your system. A unique identifier that can be used to reconcile the payment with your internal system."
      },
      "Payment-Description": {
        "type": "string",
        "example": "Test Shop - #84370745531439",
        "description": "An arbitrary string attached to the payment. Often useful for displaying to users."
      },
      "Payment-AccountId": {
        "type": "string",
        "example": "aa9333ba-82de-400c-9ae7-087b9f8d2242",
        "description": "MONEI Account identifier."
      },
      "Payment-AuthorizationCode": {
        "type": "string",
        "example": "475816",
        "description": "Unique identifier provided by the bank performing transaction."
      },
      "Payment-Livemode": {
        "type": "boolean",
        "example": false,
        "description": "Has the value `true` if the payment exists in live mode or the value `false` if the payment exists in test mode."
      },
      "Payment-Status": {
        "type": "string",
        "example": "PENDING",
        "enum": [
          "SUCCEEDED",
          "PENDING",
          "FAILED",
          "CANCELED",
          "REFUNDED",
          "PARTIALLY_REFUNDED",
          "AUTHORIZED",
          "EXPIRED"
        ],
        "description": "The status of the payment."
      },
      "Payment-StatusCode": {
        "type": "string",
        "example": null,
        "description": "Payment status code."
      },
      "Payment-StatusMessage": {
        "type": "string",
        "example": null,
        "description": "Human readable status message, can be displayed to a user."
      },
      "Payment-RefundedAmount": {
        "type": "integer",
        "format": "int32",
        "example": null,
        "description": "Amount in cents refunded (can be less than the amount attribute on the payment if a partial refund was issued)."
      },
      "Payment-LastRefundAmount": {
        "type": "integer",
        "format": "int32",
        "example": null,
        "description": "Amount in cents refunded in the last transaction."
      },
      "Payment-LastRefundReason": {
        "type": "string",
        "example": null,
        "enum": [
          "duplicated",
          "fraudulent",
          "requested_by_customer"
        ],
        "description": "The reason of the last refund transaction."
      },
      "Payment-CancellationReason": {
        "type": "string",
        "example": null,
        "enum": [
          "duplicated",
          "fraudulent",
          "requested_by_customer"
        ],
        "description": "The reason for canceling the Payment."
      },
      "Payment-Customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer’s email address."
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The customer’s full name or business name."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The customer’s phone number."
          }
        }
      },
      "Payment-SessionId": {
        "type": "string",
        "example": "39603551437913",
        "description": "A unique identifier within your system that adds security to the payment process. You need to pass the same session ID as the one used on the frontend to initialize MONEI Component (if you needed to). This is required if a payment token (not permanent) was already generated in the frontend."
      },
      "Payment-SequenceId": {
        "type": "string",
        "example": "62b23b9f3627cc38b08ff471ccd313ad",
        "description": "A permanent identifier that refers to the initial payment of a sequence of payments. This value needs to be sent in the path for `RECURRING` payments."
      },
      "Payment-Sequence": {
        "type": "object",
        "description": "This field needs to be sent in order to mark the beginning of a sequence of payments (recurring/subscriptions, installments, and so). Specific configurations can be set in the inside properties (`recurring`).",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "recurring",
            "enum": [
              "recurring"
            ]
          },
          "recurring": {
            "$ref": "#/components/schemas/Payment-SequenceRecurring"
          }
        }
      },
      "Payment-SequenceRecurring": {
        "type": "object",
        "description": "Specific configurations for recurring payments. Will only be used when `sequence`.`type` is `recurring`.",
        "properties": {
          "expiry": {
            "type": "string",
            "example": "20210630",
            "default": "*(The payment method or card expiration)*",
            "description": "Date after which no further recurring payments will be performed. Must be formatted as `YYYYMMDD`."
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "example": 30,
            "default": 25,
            "description": "The minimum number of **days** between the different recurring payments."
          }
        }
      },
      "Payment-PaymentToken": {
        "type": "string",
        "example": "7cc38b08ff471ccd313ad62b23b9f362b107560b",
        "description": "A permanent token represents a payment method used in the payment. Pass `generatePaymentToken: true` when you creating a payment to generate it. You can pass it as `paymentToken` parameter to create other payments with the same payment method. This token does not expire, and should only be used server-side."
      },
      "Payment-GeneratePaymentToken": {
        "type": "boolean",
        "example": false,
        "default": false,
        "description": "If set to true a permanent token that represents a payment method used in the payment will be generated."
      },
      "Payment-PaymentMethod": {
        "type": "object",
        "description": "Details about the payment method at the time of the transaction.",
        "properties": {
          "method": {
            "type": "string",
            "example": "card",
            "enum": [
              "card",
              "bizum",
              "googlePay",
              "applePay",
              "paypal"
            ],
            "description": "Payment method type."
          },
          "card": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCard"
          },
          "bizum": {
            "$ref": "#/components/schemas/Payment-PaymentMethodBizum"
          },
          "paypal": {
            "$ref": "#/components/schemas/Payment-PaymentMethodPaypal"
          }
        }
      },
      "Payment-PaymentMethodCard": {
        "type": "object",
        "description": "Details about the card used as payment method at the time of the transaction.",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "brand": {
            "type": "string",
            "example": "visa",
            "enum": [
              "visa",
              "mastercard",
              "diners",
              "amex",
              "jcb",
              "unionpay",
              "unknown"
            ],
            "description": "Card brand."
          },
          "type": {
            "type": "string",
            "example": "credit",
            "enum": [
              "debit",
              "credit"
            ],
            "description": "Card type `debit` or `credit`."
          },
          "threeDSecure": {
            "type": "boolean",
            "example": false,
            "description": "Wether this transaction used 3D Secure authentication."
          },
          "threeDSecureVersion": {
            "type": "string",
            "example": "2.1.0",
            "description": "The protocol version of the 3DS challenge."
          },
          "last4": {
            "type": "string",
            "example": "0004",
            "description": "The last four digits of the card."
          }
        }
      },
      "Payment-PaymentMethodBizum": {
        "type": "object",
        "description": "Details about the Bizum account used as payment method at the time of the transaction.",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": null,
            "description": "The phone number used to pay with `bizum`."
          }
        }
      },
      "Payment-PaymentMethodPaypal": {
        "type": "object",
        "description": "Details from Paypal order used as payment method at the time of the transaction.",
        "properties": {
          "orderId": {
            "type": "string",
            "example": null,
            "description": "The Paypal's order ID."
          }
        }
      },
      "Payment-PaymentMethodInput": {
        "type": "object",
        "description": "An information about a payment method used for this payment. We recommend using `paymentToken` instead, as it is more secure way to pass sensitive payment information. Processing credit card information on your server requires [PCI DSS compliance](https://www.investopedia.com/terms/p/pci-compliance.asp).",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/Card"
          }
        }
      },
      "Payment-PaymentMethods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "enum": [
          "card",
          "bizum",
          "applePay",
          "googlePay",
          "paypal"
        ],
        "example": [
          "card",
          "bizum",
          "paypal"
        ],
        "description": "An array of allowed payment methods (used in hosted payment page). Must be enabled payment methods. Possible values:\n  - `card`\n  - `bizum`\n  - `applePay`\n  - `googlePay`\n  - `paypal`"
      },
      "Payment-TransactionType": {
        "type": "string",
        "example": "SALE",
        "default": "SALE",
        "enum": [
          "SALE",
          "AUTH"
        ],
        "description": "Controls when the funds will be captured.\n  - `SALE` - **Default**. MONEI automatically captures funds\n    when the customer authorizes the payment.\n  - `AUTH` - Place a hold on the funds when the customer authorizes\n    the payment, but don’t capture the funds until later."
      },
      "Payment-Shop": {
        "type": "object",
        "description": "The information about the shop (used in [hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)).",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test Shop",
            "description": "The shop name."
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "Payment-BillingDetails": {
        "type": "object",
        "description": "Billing information associated with the payment method at the time of the transaction.",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The customer’s billing full name."
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer’s billing email address."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The customer’s billing phone number."
          },
          "company": {
            "type": "string",
            "example": null,
            "description": "Billing company name."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Payment-ShippingDetails": {
        "type": "object",
        "description": "Shipping information associated with the payment.",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The shipping customer’s full name."
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The shipping customer’s email address."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The shipping customer’s phone number."
          },
          "company": {
            "type": "string",
            "example": null,
            "description": "Name of the company where the shipment is going."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Payment-SessionDetails": {
        "description": "Information related to the browsing session of the user who initiated the payment.",
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Country"
          },
          "lang": {
            "$ref": "#/components/schemas/Lang"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "deviceModel": {
            "$ref": "#/components/schemas/DeviceModel"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "browserVersion": {
            "$ref": "#/components/schemas/BrowserVersion"
          },
          "os": {
            "$ref": "#/components/schemas/Os"
          },
          "osVersion": {
            "$ref": "#/components/schemas/OsVersion"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "sourceVersion": {
            "$ref": "#/components/schemas/SourceVersion"
          },
          "userAgent": {
            "$ref": "#/components/schemas/UserAgent"
          }
        }
      },
      "Payment-TraceDetails": {
        "description": "Information related to the browsing session of the user who initiated the payment.",
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Country"
          },
          "lang": {
            "$ref": "#/components/schemas/Lang"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "deviceModel": {
            "$ref": "#/components/schemas/DeviceModel"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "browserVersion": {
            "$ref": "#/components/schemas/BrowserVersion"
          },
          "os": {
            "$ref": "#/components/schemas/Os"
          },
          "osVersion": {
            "$ref": "#/components/schemas/OsVersion"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "sourceVersion": {
            "$ref": "#/components/schemas/SourceVersion"
          },
          "userAgent": {
            "$ref": "#/components/schemas/UserAgent"
          },
          "userId": {
            "type": "string",
            "example": null,
            "description": "The ID of the user that started the operation."
          },
          "userEmail": {
            "type": "string",
            "example": "user@example.com",
            "description": "The email of the user that started the operation."
          }
        }
      },
      "Payment-NextAction": {
        "type": "object",
        "description": "If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.",
        "properties": {
          "type": {
            "type": "string",
            "example": "CONFIRM",
            "enum": [
              "CONFIRM",
              "CHALLENGE",
              "COMPLETE"
            ],
            "description": "- `CONFIRM` - Your customer needs to be redirected to a\n  [hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)\n  or confirm payment using\n  [payment token](https://docs.monei.com/docs/accept-card-payment#3-submitting-the-payment-to-monei-client-side).\n  The **redirectUrl** will point to the hosted payment page.\n- `CHALLENGE` - Your customer needs to be redirected to the\n  3d secure challenge page provided by the bank. The **redirectUrl**\n  will point to the 3d secure challenge page provided by the bank.\n- `COMPLETE` - The payment is completed. The **redirectUrl** will be\n  the **completeUrl** if it was provided when the payment was created."
          },
          "mustRedirect": {
            "type": "boolean",
            "example": false,
            "description": "If `true` you have to redirect your customer to the **redirectUrl** to continue payment process."
          },
          "redirectUrl": {
            "type": "string",
            "example": "https://secure.monei.com/payments/af6029f80f5fc73a8ad2753eea0b1be0",
            "description": "Redirect your customer to this url to continue payment process."
          }
        }
      },
      "Payment-CallbackUrl": {
        "type": "string",
        "example": "https://example.com/checkout/callback",
        "description": "The URL to which a payment result should be sent asynchronously."
      },
      "Payment-CompleteUrl": {
        "type": "string",
        "example": "https://example.com/checkout/complete",
        "description": "The URL the customer will be directed to after transaction completed (successful or failed - except if `failUrl` is provided)."
      },
      "Payment-FailUrl": {
        "type": "string",
        "example": "https://example.com/checkout/fail",
        "description": "The URL the customer will be directed to after transaction has failed, instead of `completeUrl` (used in hosted payment page). This allows to provide two different URLs for successful and failed payments."
      },
      "Payment-CancelUrl": {
        "type": "string",
        "example": "https://example.com/checkout/cancel",
        "description": "The URL the customer will be directed to if they decide to cancel payment and return to your website (used in hosted payment page)."
      },
      "Payment-RefundReason": {
        "type": "string",
        "example": null,
        "enum": [
          "duplicated",
          "fraudulent",
          "requested_by_customer"
        ],
        "description": "The reason for refunding the Payment."
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The payment ID",
        "schema": {
          "type": "string"
        }
      },
      "sequenceId": {
        "name": "sequenceId",
        "in": "path",
        "required": true,
        "description": "The sequence ID",
        "schema": {
          "type": "string"
        }
      }
    },
    "examples": {
      "CreatePaymentBasicRequest": {
        "value": {
          "amount": "110,",
          "currency": "EUR",
          "orderId": "14379133960355",
          "paymentToken": "7cc38b08ff471ccd313ad62b23b9f362b107560b",
          "callbackUrl": "https://example.com/checkout/callback",
          "completeUrl": "https://example.com/checkout/complete"
        }
      },
      "ConfirmPaymentBasicRequest": {
        "value": {
          "paymentToken": "7cc38b08ff471ccd313ad62b23b9f362b107560b"
        }
      },
      "CapturePaymentFullRequest": {
        "value": {
          "amount": 100
        }
      },
      "CancelPaymentFullRequest": {
        "value": {
          "cancellationReason": "requested_by_customer"
        }
      },
      "RefundPaymentFullRequest": {
        "value": {
          "amount": 50,
          "refundReason": "requested_by_customer"
        }
      },
      "RecurringPaymentBasicRequest": {
        "value": {
          "amount": "110,",
          "currency": "EUR",
          "orderId": "14379133960366",
          "callbackUrl": "https://example.com/checkout/callback"
        }
      }
    }
  },
  "tags": [
    {
      "name": "Payments",
      "description": "To charge a credit or a debit card, you create a Payment object. You can capture, cancel, refund and confirm individual payments. Payments are identified by a unique, random ID.\n\nWe recommend that you create exactly one Payment for each order or customer session in your system.\n## Payment object\n<SchemaDefinition schemaRef=\"#/components/schemas/Payment\" />"
    }
  ],
  "paths": {
    "/payments": {
      "post": {
        "operationId": "payments_create",
        "summary": "Create Payment",
        "description": "To charge a credit card or other payment method, you create a Payment. <br/><br/> Payment can also be created without a payment method to initiate a payment process and redirect a customer to the hosted payment page.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/CreatePaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->create([\n  'amount' => 110, // 1.10 EUR\n  'orderId' => '14379133960355',\n  'currency' => 'EUR'\n  'paymentToken' => '7cc38b08ff471ccd313ad62b23b9f362b107560b',\n  'callbackUrl' => 'https://example.com/checkout/callback',\n  'completeUrl' => 'https://example.com/checkout/complete'\n]);\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.create({\n  amount: 110, // 1.10 EUR\n  currency: 'EUR',\n  orderId: '14379133960355',\n  paymentToken: '7cc38b08ff471ccd313ad62b23b9f362b107560b',\n  callbackUrl: 'https://example.com/checkout/callback',\n  completeUrl: 'https://example.com/checkout/complete'\n});\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.create({\n    'amount': 110, # 1.10€\n    'currency': 'EUR',\n    'orderId': '14379133960355',\n    'paymentToken': '7cc38b08ff471ccd313ad62b23b9f362b107560b',\n    'callbackUrl': 'https://example.com/checkout/callback',\n    'completeUrl': 'https://example.com/checkout/complete'\n})\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "get": {
        "operationId": "payments_get",
        "summary": "Get Payment",
        "description": "Get the details of a payment that has previously been created. Supply the unique payment ID that was returned from your previous request.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->get('832b77d1a4b372349a7ae0bb1b2af059');\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.get('832b77d1a4b372349a7ae0bb1b2af059');\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.get('832b77d1a4b372349a7ae0bb1b2af059')\n"
          }
        ]
      }
    },
    "/payments/{id}/confirm": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "post": {
        "operationId": "payments_confirm",
        "summary": "Confirm Payment",
        "description": "Confirm a payment that was created without a `paymentToken` or `paymentMethod`. You can only confirm a payment with the `PENDING` status. <br/><br/> You can charge a customer in two steps. First create a payment without payment details and then confirm it after you generate a `paymentToken` on the front-end with monei.js [Components](https://docs.monei.com/docs/monei-js-overview). <br/><br/> You can provide additional customer information, it will override the information passed in **create payment** request.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/ConfirmPaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->confirm(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['paymentToken' => '7cc38b08ff471ccd313ad62b23b9f362b107560b']\n);\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.confirm(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  {paymentToken: '7cc38b08ff471ccd313ad62b23b9f362b107560b'}\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.confirm(\n    '832b77d1a4b372349a7ae0bb1b2af059',\n    confirm_payment_request={'paymentToken': '7cc38b08ff471ccd313ad62b23b9f362b107560b'}\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/capture": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "post": {
        "operationId": "payments_capture",
        "summary": "Capture Payment",
        "description": "Capture the payment of an existing, uncaptured, payment. This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`. <br/><br/> Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as expired and will no longer be capturable.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapturePaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/CapturePaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->capture(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['amount' => 100] // 1.00 EUR\n);\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.capture(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  {amount: 100} // 1.00 EUR\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.capture(\n    '832b77d1a4b372349a7ae0bb1b2af059',\n    capture_payment_request={'amount': 100} # 1.00 EUR\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "post": {
        "operationId": "payments_cancel",
        "summary": "Cancel Payment",
        "description": "Release customer's funds that were reserved earlier. You can only cancel a payment with the `AUTHORIZED` status. <br/><br/> This is the second half of the two-step payment flow, where first you created a payment with the `transactionType` set to `AUTH`.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/CancelPaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->cancel(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['cancellationReason' => 'requested_by_customer']\n);\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei, PaymentCancellationReason} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.cancel(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  {cancellationReason: PaymentCancellationReason.RequestedByCustomer}\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.cancel(\n    '832b77d1a4b372349a7ae0bb1b2af059',\n    cancel_payment_request={'cancellationReason': 'requested_by_customer'}\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ],
      "post": {
        "operationId": "payments_refund",
        "summary": "Refund Payment",
        "description": "Refund a payment that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged. <br/><br/> You can optionally refund only part of a payment. You can do so multiple times, until the entire payment has been refunded. <br/><br/> Once entirely refunded, a payment can’t be refunded again. This method will throw an error when called on an already-refunded payment, or when trying to refund more money than is left on a payment.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/RefundPaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        },
        "x-codeSamples": [
          {
            "lang": "PHP",
            "source": "$monei = new Monei\\MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->cancel(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['refundReason' => 'requested_by_customer']\n);\n"
          },
          {
            "lang": "Node.js",
            "source": "const {Monei, PaymentRefundReason} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.refund(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  {refundReason: PaymentRefundReason.RequestedByCustomer}\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.refund(\n    '832b77d1a4b372349a7ae0bb1b2af059',\n    refund_payment_request={'refundReason': 'requested_by_customer'}\n)\n"
          }
        ]
      }
    },
    "/payments/{sequenceId}/recurring": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sequenceId"
        }
      ],
      "post": {
        "operationId": "payments_recurring",
        "summary": "Recurring Payment",
        "description": "Creates a subsequent operation for a recurring payment, previously created. The specified amount will be charged to the same credit or debit card of the originally payment. <br/><br/> If amount is not specified, it will default to the same amount from the original payment.",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringPaymentRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/RecurringPaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          }
        }
      }
    }
  }
}