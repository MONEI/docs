{
  "openapi": "3.0.0",
  "info": {
    "version": "1.5.7",
    "title": "MONEI API v1",
    "description": "<p>The MONEI API is organized around <a href=\"https://en.wikipedia.org/wiki/Representational_State_Transfer\">REST</a> principles. Our API is designed to be intuitive and developer-friendly.</p>\n<h3>Base URL</h3>\n<p>All API requests should be made to:</p>\n<pre><code>https://api.monei.com/v1\n</code></pre>\n<h3>Environment</h3>\n<p>MONEI provides two environments:</p>\n<ul>\n<li><strong>Test Environment</strong>: For development and testing without processing real payments</li>\n<li><strong>Live Environment</strong>: For processing real transactions in production</li>\n</ul>\n<h3>Client Libraries</h3>\n<p>We provide official SDKs to simplify integration:</p>\n<ul>\n<li><a href=\"https://github.com/MONEI/monei-php-sdk\">PHP SDK</a></li>\n<li><a href=\"https://github.com/MONEI/monei-python-sdk\">Python SDK</a></li>\n<li><a href=\"https://github.com/MONEI/monei-node-sdk\">Node.js SDK</a></li>\n<li><a href=\"https://postman.monei.com/\">Postman Collection</a></li>\n</ul>\n<p>Our SDKs handle authentication, error handling, and request formatting automatically.</p>\n<p>You can download the OpenAPI specification from the <a href=\"https://js.monei.com/api/v1/openapi.json\">https://js.monei.com/api/v1/openapi.json</a> and generate your own client library using the <a href=\"https://openapi-generator.tech/\">OpenAPI Generator</a>.</p>\n<h3>Important Requirements</h3>\n<ul>\n<li>All API requests must be made over HTTPS</li>\n<li>If you are not using our official SDKs, you <strong>must provide a valid <code>User-Agent</code> header</strong> with each request</li>\n<li>Requests without proper authentication will return a <code>401 Unauthorized</code> error</li>\n</ul>\n<h3>Error Handling</h3>\n<p>The API returns consistent error codes and messages to help you troubleshoot issues. Each response includes a <code>statusCode</code> attribute indicating the outcome of your request.</p>\n<h3>Rate Limits</h3>\n<p>The API implements rate limiting to ensure stability. If you exceed the limits, requests will return a <code>429 Too Many Requests</code> status code.</p>\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://api.monei.com/v1",
      "description": "MONEI API v1"
    }
  ],
  "tags": [
    {
      "name": "Payment Status Codes",
      "description": "<p>The MONEI API returns a <code>statusCode</code> attribute in the <a href=\"/docs/apis/rest/payments/\">Payment Object</a> to indicate the outcome of your request. This helps you understand whether an operation was successful or why it failed.</p>\n<h3>Success Code</h3>\n<p>Successful transactions return the following code:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E000</td>\n<td>Transaction approved</td>\n</tr>\n<tr>\n<td>E001</td>\n<td>Transaction pending processing</td>\n</tr>\n<tr>\n<td>E002</td>\n<td>Transaction pending authentication</td>\n</tr>\n<tr>\n<td>E003</td>\n<td>Transaction pending authorization</td>\n</tr>\n</tbody></table>\n<h3>Error Codes</h3>\n<p>Error codes are grouped by category to help you quickly identify the type of issue:</p>\n<h4>Configuration Errors (E1xx)</h4>\n<p>These errors relate to account configuration issues:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E101</td>\n<td>Error with payment processor configuration. Check this in your dashboard or contact MONEI for support</td>\n</tr>\n<tr>\n<td>E102</td>\n<td>Invalid or inactive MID. Please contact the acquiring entity</td>\n</tr>\n<tr>\n<td>E103</td>\n<td>Operation not allowed/configured for this merchant. Please contact the acquiring entity or MONEI for support</td>\n</tr>\n<tr>\n<td>E104</td>\n<td>Partial captures are not enabled in your account, please contact MONEI support</td>\n</tr>\n<tr>\n<td>E105</td>\n<td>MOTO Payment are not enabled in your account, please contact MONEI support</td>\n</tr>\n</tbody></table>\n<h4>Authentication and Request Errors (E15x)</h4>\n<p>These errors indicate issues with your API request format or authentication:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E150</td>\n<td>Invalid or malformed request. Please check the message format</td>\n</tr>\n<tr>\n<td>E151</td>\n<td>Missing or malformed signature/auth</td>\n</tr>\n<tr>\n<td>E152</td>\n<td>Error while decrypting request</td>\n</tr>\n<tr>\n<td>E153</td>\n<td>Pre-authorization is expired and cannot be canceled or captured</td>\n</tr>\n<tr>\n<td>E154</td>\n<td>The payment date cannot be less than the cancellation or capture date</td>\n</tr>\n<tr>\n<td>E155</td>\n<td>The cancellation date exceeded the date allowed for pre-authorized operations</td>\n</tr>\n<tr>\n<td>E156</td>\n<td>Unauthorized token</td>\n</tr>\n</tbody></table>\n<h4>Transaction Processing Errors (E2xx)</h4>\n<p>These errors occur during payment processing:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E200</td>\n<td>Transaction failed during payment processing</td>\n</tr>\n<tr>\n<td>E201</td>\n<td>Transaction declined by the card-issuing bank</td>\n</tr>\n<tr>\n<td>E202</td>\n<td>Transaction declined by the issuing bank</td>\n</tr>\n<tr>\n<td>E203</td>\n<td>Payment method not allowed</td>\n</tr>\n<tr>\n<td>E204</td>\n<td>Wrong or not allowed currency</td>\n</tr>\n<tr>\n<td>E205</td>\n<td>Incorrect reference / transaction does not exist</td>\n</tr>\n<tr>\n<td>E206</td>\n<td>Invalid payment method</td>\n</tr>\n<tr>\n<td>E207</td>\n<td>Transaction failed: process time exceeded</td>\n</tr>\n<tr>\n<td>E208</td>\n<td>Transaction is currently being processed</td>\n</tr>\n<tr>\n<td>E209</td>\n<td>Duplicated operation</td>\n</tr>\n<tr>\n<td>E210</td>\n<td>Wrong or not allowed payment amount</td>\n</tr>\n<tr>\n<td>E211</td>\n<td>Refund declined by processor</td>\n</tr>\n<tr>\n<td>E212</td>\n<td>Transaction has already been captured</td>\n</tr>\n<tr>\n<td>E213</td>\n<td>Transaction has already been canceled</td>\n</tr>\n<tr>\n<td>E214</td>\n<td>The amount to be captured cannot exceed the pre-authorized amount</td>\n</tr>\n<tr>\n<td>E215</td>\n<td>The transaction to be captured has not been pre-authorized yet</td>\n</tr>\n<tr>\n<td>E216</td>\n<td>The transaction to be canceled has not been pre-authorized yet</td>\n</tr>\n<tr>\n<td>E217</td>\n<td>Transaction denied by processor to avoid duplicated operations</td>\n</tr>\n<tr>\n<td>E218</td>\n<td>Error during payment request validation</td>\n</tr>\n<tr>\n<td>E219</td>\n<td>Refund declined due to exceeded amount</td>\n</tr>\n<tr>\n<td>E220</td>\n<td>Transaction has already been fully refunded</td>\n</tr>\n<tr>\n<td>E221</td>\n<td>Transaction declined due to insufficient funds</td>\n</tr>\n<tr>\n<td>E222</td>\n<td>The user has canceled the payment</td>\n</tr>\n<tr>\n<td>E223</td>\n<td>Waiting for the transaction to be completed</td>\n</tr>\n<tr>\n<td>E224</td>\n<td>No reason to decline</td>\n</tr>\n<tr>\n<td>E225</td>\n<td>Refund not allowed</td>\n</tr>\n<tr>\n<td>E226</td>\n<td>Transaction cannot be completed, violation of law</td>\n</tr>\n<tr>\n<td>E227</td>\n<td>Stop Payment Order</td>\n</tr>\n<tr>\n<td>E228</td>\n<td>Strong Customer Authentication required</td>\n</tr>\n<tr>\n<td>E229</td>\n<td>Expired payment method</td>\n</tr>\n</tbody></table>\n<h4>3D Secure Related Errors (E3xx)</h4>\n<p>These errors are related to 3D Secure authentication:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E300</td>\n<td>Transaction declined due to security restrictions</td>\n</tr>\n<tr>\n<td>E301</td>\n<td>3D Secure authentication failed</td>\n</tr>\n<tr>\n<td>E302</td>\n<td>Authentication process timed out. Please try again</td>\n</tr>\n<tr>\n<td>E303</td>\n<td>An error occurred during the 3D Secure process</td>\n</tr>\n<tr>\n<td>E304</td>\n<td>Invalid or malformed 3D Secure request</td>\n</tr>\n<tr>\n<td>E305</td>\n<td>Exemption not allowed</td>\n</tr>\n<tr>\n<td>E306</td>\n<td>Exemption error</td>\n</tr>\n<tr>\n<td>E307</td>\n<td>Fraud control error</td>\n</tr>\n<tr>\n<td>E308</td>\n<td>External MPI received wrong. Please check the data</td>\n</tr>\n<tr>\n<td>E309</td>\n<td>External MPI not enabled. Please contact support</td>\n</tr>\n<tr>\n<td>E310</td>\n<td>Transaction confirmation rejected by the merchant</td>\n</tr>\n</tbody></table>\n<h4>Card Related Errors (E5xx)</h4>\n<p>These errors are specific to card payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E500</td>\n<td>Transaction declined during card payment process</td>\n</tr>\n<tr>\n<td>E501</td>\n<td>Card rejected: invalid card number</td>\n</tr>\n<tr>\n<td>E502</td>\n<td>Card rejected: wrong expiration date</td>\n</tr>\n<tr>\n<td>E503</td>\n<td>Card rejected: wrong CVC/CVV2 number</td>\n</tr>\n<tr>\n<td>E504</td>\n<td>Card number not registered</td>\n</tr>\n<tr>\n<td>E505</td>\n<td>Card is expired</td>\n</tr>\n<tr>\n<td>E506</td>\n<td>Error during payment authorization. Please try again</td>\n</tr>\n<tr>\n<td>E507</td>\n<td>Cardholder has canceled the payment</td>\n</tr>\n<tr>\n<td>E508</td>\n<td>Transaction declined: AMEX cards not accepted by payment processor</td>\n</tr>\n<tr>\n<td>E509</td>\n<td>Card blocked temporarily or under suspicion of fraud</td>\n</tr>\n<tr>\n<td>E510</td>\n<td>Card does not allow pre-authorization operations</td>\n</tr>\n<tr>\n<td>E511</td>\n<td>CVC/CVV2 number is required</td>\n</tr>\n<tr>\n<td>E512</td>\n<td>Unsupported card type</td>\n</tr>\n<tr>\n<td>E513</td>\n<td>Transaction type not allowed for this type of card</td>\n</tr>\n<tr>\n<td>E514</td>\n<td>Transaction declined by card issuer</td>\n</tr>\n<tr>\n<td>E515</td>\n<td>Implausible card data</td>\n</tr>\n<tr>\n<td>E516</td>\n<td>Incorrect PIN</td>\n</tr>\n<tr>\n<td>E517</td>\n<td>Transaction not allowed for cardholder</td>\n</tr>\n<tr>\n<td>E518</td>\n<td>The amount exceeds the card limit</td>\n</tr>\n</tbody></table>\n<h4>Digital Wallet Errors (E6xx)</h4>\n<p>These errors are related to digital wallet payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E600</td>\n<td>Transaction declined during ApplePay/GooglePay payment process</td>\n</tr>\n<tr>\n<td>E601</td>\n<td>Incorrect ApplePay or GooglePay configuration</td>\n</tr>\n</tbody></table>\n<h4>PayPal Related Errors (E62x)</h4>\n<p>These errors are specific to PayPal payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E620</td>\n<td>Transaction declined during PayPal payment process</td>\n</tr>\n<tr>\n<td>E621</td>\n<td>Transaction declined during PayPal payment process: invalid currency</td>\n</tr>\n</tbody></table>\n<h4>Bizum Related Errors (E64x-E65x)</h4>\n<p>These errors are specific to Bizum payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E640</td>\n<td>Bizum transaction declined after three authentication attempts</td>\n</tr>\n<tr>\n<td>E641</td>\n<td>Bizum transaction declined due to failed authorization</td>\n</tr>\n<tr>\n<td>E642</td>\n<td>Bizum transaction declined due to insufficient funds</td>\n</tr>\n<tr>\n<td>E643</td>\n<td>Bizum transaction canceled: the user does not want to continue</td>\n</tr>\n<tr>\n<td>E644</td>\n<td>Bizum transaction rejected by destination bank</td>\n</tr>\n<tr>\n<td>E645</td>\n<td>Bizum transaction rejected by origin bank</td>\n</tr>\n<tr>\n<td>E646</td>\n<td>Bizum transaction rejected by processor</td>\n</tr>\n<tr>\n<td>E647</td>\n<td>Bizum transaction failed while connecting with processor. Please try again</td>\n</tr>\n<tr>\n<td>E648</td>\n<td>Bizum transaction failed, payee is not found</td>\n</tr>\n<tr>\n<td>E649</td>\n<td>Bizum transaction failed, payer is not found</td>\n</tr>\n<tr>\n<td>E650</td>\n<td>Bizum REST not implemented</td>\n</tr>\n<tr>\n<td>E651</td>\n<td>Bizum transaction declined due to failed authentication</td>\n</tr>\n<tr>\n<td>E652</td>\n<td>The customer has disabled Bizum, please use another payment method</td>\n</tr>\n</tbody></table>\n<h4>ClickToPay Related Errors (E68x)</h4>\n<p>These errors are specific to ClickToPay payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E680</td>\n<td>Transaction declined during ClickToPay payment process</td>\n</tr>\n<tr>\n<td>E681</td>\n<td>Incorrect ClickToPay configuration</td>\n</tr>\n</tbody></table>\n<h4>Cofidis Related Errors (E7xx)</h4>\n<p>These errors are specific to Cofidis payments:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E700</td>\n<td>Transaction declined during Cofidis payment process</td>\n</tr>\n</tbody></table>\n<h4>System Errors (E9xx)</h4>\n<p>These errors indicate system-level issues:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Message</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>E999</td>\n<td>Service internal error. Please contact support</td>\n</tr>\n</tbody></table>\n"
    },
    {
      "name": "Apple Pay Domain",
      "description": "<p>The Apple Pay Domain API allows you to register and manage domains for Apple Pay integration.</p>\n<p>With the Apple Pay Domain API, you can:</p>\n<ul>\n<li>Register domains to use with Apple Pay</li>\n<li>View currently registered domains</li>\n<li>Ensure your website is properly configured for Apple Pay payments</li>\n</ul>\n<p>Apple requires domain verification before you can accept Apple Pay payments on your website.\nThis API simplifies the process of registering your domains with Apple Pay and maintaining\nyour domain verification status.</p>\n<h2>Domain registration process</h2>\n<p>To accept Apple Pay on your website, you must register your domain with Apple. This process:</p>\n<ol>\n<li>Verifies that you control the domain</li>\n<li>Allows Apple Pay buttons to be displayed on your website</li>\n<li>Enables secure payment processing through Apple Pay</li>\n</ol>\n<p>Once registered, your domain will be authorized to display Apple Pay payment options to customers.</p>\n"
    },
    {
      "name": "Bizum",
      "description": "<p>The Bizum API allows you to integrate with Spain&#39;s popular mobile payment system.</p>\n<p>With the Bizum API, you can:</p>\n<ul>\n<li>Validate customer phone numbers for Bizum compatibility</li>\n<li>Process payments using Bizum as a payment method</li>\n<li>Offer a seamless mobile payment experience for Spanish customers</li>\n</ul>\n<p>Bizum is a widely used payment method in Spain that allows customers to make payments\nusing their mobile phone number linked to their bank account. This API provides the\nnecessary tools to incorporate Bizum into your payment options.</p>\n<h2>Bizum validation</h2>\n<p>Before processing a Bizum payment, you can validate if a customer&#39;s phone number is\nregistered with Bizum using the validate-phone endpoint.</p>\n"
    },
    {
      "name": "Payment Methods",
      "description": "<p>The Payment Methods API allows you to retrieve available payment methods for an account or a specific payment.\nThis information can be used to display appropriate payment options to your customers.</p>\n<p>Payment methods vary by country, currency, and merchant configuration. This API helps you dynamically\ndetermine which payment methods are available for a specific transaction or account.</p>\n<p>You can use this API to:</p>\n<ul>\n<li>Get all payment methods available for an account</li>\n<li>Get payment methods available for a specific payment</li>\n<li>Display payment options to your customers based on their location and purchase details</li>\n</ul>\n<h2>Payment Methods object</h2>\nSee [PaymentMethods](/docs/apis/rest/schemas/paymentmethods/) for more information.\n"
    },
    {
      "name": "Payments",
      "description": "<p>The Payments API provides a comprehensive platform for processing transactions and managing the complete payment lifecycle.</p>\n<h3>Core Payment Operations</h3>\n<ul>\n<li>Create and process payments with multiple payment methods</li>\n<li>Authorize payments and capture funds later</li>\n<li>Cancel authorized payments to release reserved funds</li>\n<li>Refund payments partially or in full</li>\n<li>Generate detailed receipts for completed payments</li>\n</ul>\n<h3>Customer Experience Features</h3>\n<ul>\n<li>Send payment requests via WhatsApp, SMS, or Bizum</li>\n<li>Create and distribute payment links through various channels</li>\n<li>Generate permanent payment tokens for one-click checkout experiences</li>\n<li>Support recurring billing and subscription payments</li>\n</ul>\n<h3>Implementation Best Practices</h3>\n<ul>\n<li>Create one payment per order or customer session for clear transaction records</li>\n<li>Use the unique payment ID for all subsequent operations on a payment</li>\n<li>Generate permanent payment tokens (with <code>generatePaymentToken: true</code>) for returning customers</li>\n<li>Implement webhook notifications to receive real-time payment status updates</li>\n</ul>\n<h2>Payment Object</h2>\n See [Payment](/docs/apis/rest/schemas/payment/) for more information.\n"
    },
    {
      "name": "Subscriptions",
      "description": "<h1>Subscriptions API</h1>\n<p>The Subscriptions API provides a powerful solution for managing recurring billing and subscription-based business models.</p>\n<h2>Key Features</h2>\n<h3>Flexible Billing Options</h3>\n<ul>\n<li><strong>Multiple billing intervals</strong>: Daily, weekly, monthly, or yearly billing cycles</li>\n<li><strong>Custom intervals</strong>: Configure non-standard periods using intervalCount (e.g., every 3 months)</li>\n<li><strong>Trial periods</strong>: Offer free trials before the first billing cycle begins</li>\n<li><strong>Variable amounts</strong>: Update subscription amounts for pricing changes or upgrades</li>\n</ul>\n<h3>Complete Lifecycle Management</h3>\n<ul>\n<li><strong>Create subscriptions</strong>: Set up recurring billing plans with customizable parameters</li>\n<li><strong>Activate subscriptions</strong>: Begin billing cycles with customer payment information</li>\n<li><strong>Pause/Resume</strong>: Temporarily halt billing without cancellation</li>\n<li><strong>Update subscriptions</strong>: Modify pricing, billing details, or subscription parameters</li>\n<li><strong>Cancel subscriptions</strong>: End recurring billing permanently or at period end</li>\n</ul>\n<h3>Customer-Friendly Features</h3>\n<ul>\n<li><strong>Automated recurring payments</strong>: No manual action required for subsequent billing</li>\n<li><strong>Consistent billing dates</strong>: Predictable billing on the same day of each period</li>\n<li><strong>Payment retry mechanism</strong>: Automatic retries for failed payments</li>\n<li><strong>Customer control</strong>: Enable customers to manage their own subscriptions</li>\n</ul>\n<h3>Integration Benefits</h3>\n<ul>\n<li><strong>Webhook notifications</strong>: Get real-time updates on subscription status changes</li>\n<li><strong>Detailed reporting</strong>: Track subscription metrics and performance</li>\n<li><strong>Simplified compliance</strong>: Handle recurring billing requirements automatically</li>\n<li><strong>Reduced churn</strong>: Automatic billing helps prevent missed payments</li>\n</ul>\n<h2>Subscription Object</h2>\nSee [Subscription](/docs/apis/rest/schemas/subscription/) for more information.\n"
    }
  ],
  "components": {
    "securitySchemes": {
      "APIKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "<p>The MONEI API uses API keys to authenticate requests. Each request must include your API key in the <code>Authorization</code> header.</p>\n<p>You can view and manage your API keys in the <a href=\"https://dashboard.monei.com/settings/api\">MONEI Dashboard</a>.</p>\n<p>MONEI provides two types of API keys:</p>\n<ul>\n<li><strong>Test mode keys</strong>: Prefixed with <code>pk_test_</code></li>\n<li><strong>Live mode keys</strong>: Prefixed with <code>pk_live_</code></li>\n</ul>\n<h2>Implementation</h2>\n<p>Include your API key in the <code>Authorization</code> header for all API requests:</p>\n<pre><code>Authorization: pk_test_your_api_key\n</code></pre>\n<h3>Security Best Practices</h3>\n<p>Your API key carries significant privileges, so it&#39;s crucial to keep it secure:</p>\n<ul>\n<li><strong>Never share your API key</strong> in publicly accessible areas such as GitHub, client-side code, or public repositories</li>\n<li><strong>Store your API key securely</strong> in environment variables or secure configuration systems</li>\n<li><strong>Rotate your API keys periodically</strong> for enhanced security</li>\n<li><strong>Use test mode keys</strong> for development and testing</li>\n<li><strong>Restrict API key access</strong> to only the necessary services and personnel</li>\n</ul>\n"
      },
      "AccountId": {
        "type": "apiKey",
        "in": "header",
        "name": "MONEI-Account-ID",
        "description": "<p>If you&#39;re integrating with MONEI as a partner or platform, you&#39;ll need to use both your Master Account API Key and the Account ID of the merchant you&#39;re acting on behalf of.</p>\n<h3>How It Works</h3>\n<ol>\n<li><strong>Authentication</strong>: Include your Master Account API Key in the <code>Authorization</code> header</li>\n<li><strong>Account Selection</strong>: Include the merchant&#39;s Account ID in the <code>MONEI-Account-ID</code> header</li>\n</ol>\n<p>This combination allows you to perform operations on behalf of your connected merchants while using your own authentication credentials.</p>\n<h3>Implementation</h3>\n<p>For all API requests as a partner, include both headers:</p>\n<pre><code>Authorization: pk_test_your_master_api_key\nMONEI-Account-ID: acc_merchant_account_id\n</code></pre>\n<h3>Use Cases</h3>\n<p>The Account ID header is essential for:</p>\n<ul>\n<li>Processing payments on behalf of connected merchants</li>\n<li>Managing subscriptions for merchants on your platform</li>\n<li>Retrieving payment methods available to specific merchants</li>\n</ul>\n<h3>Finding Account IDs</h3>\n<p>You can find the Account ID for each connected merchant in your MONEI Partner Dashboard.</p>\n"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "The request is incorrect or could not be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestError"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized error. Please check your auth credentials",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnauthorizedError"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotFoundError"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Unexpected server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerError"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "The service is temporarily unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ServiceUnavailableError"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "The request was well-formed but could not be processed due to semantic errors",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnprocessableEntityError"
            }
          }
        }
      },
      "RegisterApplePayDomainResponse": {
        "description": "A successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "ValidateBizumPhoneResponse": {
        "description": "A successful response",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "isValid": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          }
        }
      },
      "GetPaymentMethodsResponse": {
        "description": "Available payment methods",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethods"
            }
          }
        }
      },
      "Payment": {
        "description": "A payment object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Payment"
            }
          }
        }
      },
      "Subscription": {
        "description": "A subscription object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      }
    },
    "schemas": {
      "ErrorBase": {
        "type": "object",
        "required": ["status", "statusCode", "message", "requestId", "requestTime"],
        "properties": {
          "status": {
            "type": "string",
            "description": "Error type identifier"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP status code"
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request",
            "example": "df011689-bd3e-4953-95ca-c7bbdacaf6f8"
          },
          "requestTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the request was processed",
            "example": "2025-03-05T10:25:52Z"
          }
        }
      },
      "BadRequestError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "BadRequestError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 400,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "Bad request",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "UnauthorizedError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 401,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "Unauthorized access",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "NotFoundError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 404,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "Resource not found",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "InternalServerError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 500,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "An unexpected error occurred",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "ServiceUnavailableError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "ServiceUnavailableError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 503,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "Upstream service is unavailable",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorBase"
          },
          {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "UnprocessableEntityError",
                "description": "Error type identifier"
              },
              "statusCode": {
                "type": "integer",
                "format": "int32",
                "example": 422,
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "example": "Unprocessable entity",
                "description": "Human-readable error message"
              }
            }
          }
        ]
      },
      "Country": {
        "type": "string",
        "example": "ES",
        "description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."
      },
      "IP": {
        "type": "string",
        "example": "100.100.200.100",
        "description": "The IP address where the operation originated."
      },
      "Lang": {
        "type": "string",
        "example": "es",
        "description": "Two-letter language code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1))."
      },
      "DeviceType": {
        "type": "string",
        "example": "desktop",
        "description": "Device type, could be `desktop`, `mobile`, `smartTV`, `tablet`."
      },
      "DeviceModel": {
        "type": "string",
        "example": null,
        "description": "Information about the device used for the browser session (e.g., `iPhone`)."
      },
      "Browser": {
        "type": "string",
        "example": "Chrome",
        "description": "The browser used in this browser session (e.g., `Mobile Safari`)."
      },
      "BrowserVersion": {
        "type": "string",
        "example": "83.0.4103.116",
        "description": "The version for the browser session (e.g., `13.1.1`)."
      },
      "Os": {
        "type": "string",
        "example": "Mac OS",
        "description": "Operation system (e.g., `iOS`)."
      },
      "OsVersion": {
        "type": "string",
        "example": "10.15.4",
        "description": "Operation system version (e.g., `13.5.1`)."
      },
      "Source": {
        "type": "string",
        "example": "MONEI/PHP",
        "description": "The source component from where the operation was generated (mostly for our SDK's)."
      },
      "SourceVersion": {
        "type": "string",
        "example": "0.1.2",
        "description": "The source component version from where the operation was generated (mostly for our SDK's)."
      },
      "UserAgent": {
        "type": "string",
        "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) ...",
        "description": "Full user agent string of the browser session."
      },
      "BrowserAccept": {
        "type": "string",
        "example": "text/html,application/xhtml+xml,application/json",
        "description": "Browser accept header."
      },
      "BrowserColorDepth": {
        "type": "string",
        "example": "24",
        "description": "The color depth of the browser session (e.g., `24`)."
      },
      "BrowserScreenHeight": {
        "type": "string",
        "example": "1152",
        "description": "The screen height of the browser session (e.g., `1152`)."
      },
      "BrowserScreenWidth": {
        "type": "string",
        "example": "2048",
        "description": "The screen width of the browser session (e.g., `2048`)."
      },
      "BrowserTimezoneOffset": {
        "type": "string",
        "example": "-120",
        "description": "The timezone offset of the browser session (e.g., `-120`)."
      },
      "CreatedAt": {
        "type": "integer",
        "format": "int64",
        "example": 1636366897,
        "description": "Time at which the resource was created. Measured in seconds since the Unix epoch."
      },
      "UpdatedAt": {
        "type": "integer",
        "format": "int64",
        "example": 1636366897,
        "description": "Time at which the resource updated last time. Measured in seconds since the Unix epoch."
      },
      "Address": {
        "title": "Address",
        "type": "object",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "city": {
            "type": "string",
            "example": "Málaga",
            "description": "City, district, suburb, town, or village."
          },
          "line1": {
            "type": "string",
            "example": "Fake Street 123",
            "description": "Address line 1 (e.g., street, PO Box, or company name)."
          },
          "line2": {
            "type": "string",
            "example": null,
            "description": "Address line 2 (e.g., apartment, suite, unit, or building)."
          },
          "zip": {
            "type": "string",
            "example": "1234",
            "description": "ZIP or postal code."
          },
          "state": {
            "type": "string",
            "example": "Málaga",
            "description": "State, county, province, or region."
          }
        }
      },
      "CardholderName": {
        "type": "string",
        "example": "John Doe",
        "description": "The cardholder's name, as stated in the credit card."
      },
      "CardholderEmail": {
        "type": "string",
        "example": "john.doe@monei.com",
        "description": "The cardholder's email address."
      },
      "AccountId": {
        "type": "string",
        "example": "aa9333ba-82de-400c-9ae7-087b9f8d2242",
        "description": "MONEI Account identifier."
      },
      "Livemode": {
        "type": "boolean",
        "example": false,
        "description": "Has the value `true` if the resource exists in live mode or the value `false` if the resource exists in test mode."
      },
      "Metadata": {
        "type": "object",
        "example": {
          "systemId": "12345"
        },
        "description": "A set of key-value pairs that you can attach to a resource. This can be useful for storing additional information about the resource in a structured format."
      },
      "RegisterApplePayDomainRequest": {
        "type": "object",
        "properties": {
          "domainName": {
            "$ref": "#/components/schemas/DomainName"
          }
        },
        "required": ["domainName"]
      },
      "DomainName": {
        "type": "string",
        "description": "The domain name to register for Apple Pay.",
        "example": "example.com"
      },
      "ValidateBizumPhoneRequest": {
        "type": "object",
        "properties": {
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "paymentId": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+34500000000",
            "description": "Phone number in E.164 format."
          }
        },
        "required": ["accountId", "phoneNumber"]
      },
      "PaymentMethods": {
        "title": "PaymentMethods",
        "type": "object",
        "properties": {
          "livemode": {
            "$ref": "#/components/schemas/Livemode"
          },
          "paymentMethods": {
            "$ref": "#/components/schemas/PaymentMethods-Methods"
          },
          "metadata": {
            "$ref": "#/components/schemas/PaymentMethods-Metadata"
          },
          "merchantName": {
            "$ref": "#/components/schemas/PaymentMethods-MerchantName"
          },
          "merchantUrl": {
            "$ref": "#/components/schemas/PaymentMethods-MerchantUrl"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Country"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "amount": {
            "$ref": "#/components/schemas/PaymentMethods-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/PaymentMethods-Currency"
          }
        }
      },
      "PaymentMethods-Methods": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "alipay",
            "applePay",
            "bancontact",
            "bizum",
            "blik",
            "card",
            "cardPresent",
            "clickToPay",
            "cofidis",
            "cofidisLoan",
            "eps",
            "giropay",
            "googlePay",
            "iDeal",
            "klarna",
            "mbway",
            "multibanco",
            "paypal",
            "sepa",
            "sofort",
            "trustly"
          ]
        },
        "example": [
          "bizum",
          "applePay",
          "googlePay",
          "alipay",
          "bancontact",
          "blik",
          "cofidis",
          "cofidisLoan",
          "eps",
          "iDeal",
          "mbway",
          "multibanco",
          "sofort",
          "trustly",
          "sepa",
          "klarna",
          "giropay",
          "card"
        ],
        "description": "An array of available payment methods for the account or payment.\nPossible values include:\n  - `alipay` - Alipay\n  - `applePay` - Apple Pay\n  - `bancontact` - Bancontact\n  - `bizum` - Bizum\n  - `blik` - BLIK\n  - `card` - Credit or debit card\n  - `cardPresent` - Card present (physical POS)\n  - `clickToPay` - Click to Pay\n  - `cofidis` - Cofidis\n  - `cofidisLoan` - Cofidis Loan\n  - `eps` - EPS\n  - `giropay` - Giropay\n  - `googlePay` - Google Pay\n  - `iDeal` - iDEAL\n  - `klarna` - Klarna\n  - `mbway` - MB WAY\n  - `multibanco` - Multibanco\n  - `paypal` - PayPal\n  - `sepa` - SEPA Direct Debit\n  - `sofort` - Sofort\n  - `trustly` - Trustly\n"
      },
      "PaymentMethods-Metadata": {
        "type": "object",
        "description": "Additional configuration details for each payment method.\n",
        "properties": {
          "alipay": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["CN"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "bancontact": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["BE"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "bizum": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["ES"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "blik": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["PL"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "card": {
            "type": "object",
            "properties": {
              "brands": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["visa", "mastercard"],
                "description": "List of card brands supported"
              }
            }
          },
          "eps": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["AT"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "iDeal": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["NL"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "mbway": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["PT"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "multibanco": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["PT"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "sofort": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["AT", "BE", "DE", "ES", "IT", "NL", "CH", "PL"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "trustly": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "DE",
                  "DK",
                  "EE",
                  "ES",
                  "FI",
                  "GB",
                  "LT",
                  "LV",
                  "NL",
                  "NO",
                  "PL",
                  "SE",
                  "SK"
                ],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "sepa": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "AT",
                  "BE",
                  "BG",
                  "HR",
                  "CY",
                  "CZ",
                  "DK",
                  "EE",
                  "FI",
                  "FR",
                  "DE",
                  "GR",
                  "HU",
                  "IE",
                  "IT",
                  "LV",
                  "LT",
                  "LU",
                  "MT",
                  "NL",
                  "PL",
                  "PT",
                  "RO",
                  "SK",
                  "SI",
                  "ES",
                  "SE",
                  "IS",
                  "LI",
                  "NO",
                  "AD",
                  "SM",
                  "MC",
                  "VA",
                  "PF",
                  "TF",
                  "GI",
                  "GG",
                  "IM",
                  "JE",
                  "BL",
                  "PM",
                  "CH",
                  "GB",
                  "WF"
                ],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "klarna": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "AT",
                  "BE",
                  "CH",
                  "DE",
                  "DK",
                  "ES",
                  "FI",
                  "FR",
                  "GB",
                  "IT",
                  "NL",
                  "NO",
                  "SE"
                ],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "giropay": {
            "type": "object",
            "properties": {
              "countries": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": ["DE"],
                "description": "List of countries where the payment method is available"
              }
            }
          },
          "googlePay": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "example": "12345678901234567890",
                "description": "Google Pay merchant ID"
              },
              "cvcRequired": {
                "type": "boolean",
                "example": false,
                "description": "Whether CVC is required for Google Pay transactions"
              }
            }
          },
          "applePay": {
            "type": "object",
            "properties": {
              "merchantId": {
                "type": "string",
                "example": "merchant.com.monei",
                "description": "Apple Pay merchant ID"
              }
            }
          },
          "clickToPay": {
            "type": "object",
            "properties": {
              "tokenSupport": {
                "type": "boolean",
                "example": true,
                "description": "Whether token support is enabled"
              },
              "preselected": {
                "type": "boolean",
                "example": false,
                "description": "Whether the method is preselected"
              },
              "visa": {
                "type": "object",
                "properties": {
                  "srciDpaId": {
                    "type": "string",
                    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                  },
                  "srcInitiatorId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              },
              "mastercard": {
                "type": "object",
                "properties": {
                  "srciDpaId": {
                    "type": "string",
                    "example": "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
                  },
                  "srcInitiatorId": {
                    "type": "string",
                    "example": "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
                  }
                }
              },
              "discover": {
                "type": "object",
                "properties": {
                  "srciDpaId": {
                    "type": "string",
                    "example": "71f0c4d5-9947-4d1c-9cb3-d6a3f7c4e701"
                  },
                  "srcInitiatorId": {
                    "type": "string",
                    "example": "c2d06c25-9ddb-4a5e-9d5a-3ff1c8d98467"
                  }
                }
              }
            }
          }
        }
      },
      "PaymentMethods-MerchantName": {
        "type": "string",
        "example": "MONEI",
        "description": "The name of the merchant"
      },
      "PaymentMethods-MerchantUrl": {
        "type": "string",
        "example": "https://monei.com/",
        "description": "The URL of the merchant's website"
      },
      "PaymentMethods-Amount": {
        "type": "integer",
        "example": 10,
        "description": "The amount of the payment in the smallest currency unit.\nFor example, 10 EUR = 1000 cents.\nOnly present when querying by paymentId.\n"
      },
      "PaymentMethods-Currency": {
        "type": "string",
        "example": "EUR",
        "description": "Three-letter ISO currency code, in uppercase.\nOnly present when querying by paymentId.\n"
      },
      "Payment": {
        "title": "Payment",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "authorizationCode": {
            "$ref": "#/components/schemas/Payment-AuthorizationCode"
          },
          "livemode": {
            "$ref": "#/components/schemas/Livemode"
          },
          "status": {
            "$ref": "#/components/schemas/Payment-Status"
          },
          "statusCode": {
            "$ref": "#/components/schemas/Payment-StatusCode"
          },
          "statusMessage": {
            "$ref": "#/components/schemas/Payment-StatusMessage"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "shop": {
            "$ref": "#/components/schemas/Payment-Shop"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "refundedAmount": {
            "$ref": "#/components/schemas/Payment-RefundedAmount"
          },
          "lastRefundAmount": {
            "$ref": "#/components/schemas/Payment-LastRefundAmount"
          },
          "lastRefundReason": {
            "$ref": "#/components/schemas/Payment-LastRefundReason"
          },
          "cancellationReason": {
            "$ref": "#/components/schemas/Payment-CancellationReason"
          },
          "sessionDetails": {
            "$ref": "#/components/schemas/Payment-SessionDetails"
          },
          "traceDetails": {
            "$ref": "#/components/schemas/Payment-TraceDetails"
          },
          "paymentToken": {
            "$ref": "#/components/schemas/Payment-PaymentToken"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Payment-PaymentMethod"
          },
          "sequence": {
            "$ref": "#/components/schemas/Payment-Sequence"
          },
          "sequenceId": {
            "$ref": "#/components/schemas/Payment-SequenceId"
          },
          "storeId": {
            "$ref": "#/components/schemas/Payment-StoreId"
          },
          "pointOfSaleId": {
            "$ref": "#/components/schemas/Payment-PointOfSaleId"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "nextAction": {
            "$ref": "#/components/schemas/Payment-NextAction"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "CreatePaymentRequest": {
        "title": "CreatePaymentRequest",
        "type": "object",
        "required": ["amount", "currency", "orderId"],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Payment-CallbackUrl"
          },
          "completeUrl": {
            "$ref": "#/components/schemas/Payment-CompleteUrl"
          },
          "failUrl": {
            "$ref": "#/components/schemas/Payment-FailUrl"
          },
          "cancelUrl": {
            "$ref": "#/components/schemas/Payment-CancelUrl"
          },
          "paymentToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-PaymentToken"
              }
            ],
            "description": "A payment token generated by monei.js\n[Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken\n[saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method).\nIn case of the first one, you will also need to send the `sessionId`\nused to generate the token in the first place.\n"
          },
          "sessionId": {
            "$ref": "#/components/schemas/Payment-SessionId"
          },
          "generatePaymentToken": {
            "$ref": "#/components/schemas/Payment-GeneratePaymentToken"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Payment-PaymentMethodInput"
          },
          "allowedPaymentMethods": {
            "$ref": "#/components/schemas/Payment-PaymentMethods"
          },
          "transactionType": {
            "$ref": "#/components/schemas/Payment-TransactionType"
          },
          "sequence": {
            "$ref": "#/components/schemas/Payment-Sequence"
          },
          "storeId": {
            "$ref": "#/components/schemas/Payment-StoreId"
          },
          "pointOfSaleId": {
            "$ref": "#/components/schemas/Payment-PointOfSaleId"
          },
          "subscriptionId": {
            "$ref": "#/components/schemas/Payment-SubscriptionId"
          },
          "autoRecover": {
            "$ref": "#/components/schemas/Payment-AutoRecover"
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "sessionDetails": {
            "$ref": "#/components/schemas/Payment-SessionDetails"
          },
          "expireAt": {
            "$ref": "#/components/schemas/Payment-ExpireAt"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ConfirmPaymentRequest": {
        "title": "ConfirmPaymentRequest",
        "type": "object",
        "required": ["paymentToken"],
        "properties": {
          "paymentToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-PaymentToken"
              }
            ],
            "description": "A payment token generated by monei.js\n[Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken\n[saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method).\n"
          },
          "paymentMethod": {
            "type": "object",
            "description": "Additional information about the payment method used for this payment.",
            "properties": {
              "card": {
                "type": "object",
                "description": "Additional information about the card used for this payment.",
                "properties": {
                  "cardholderName": {
                    "$ref": "#/components/schemas/CardholderName"
                  },
                  "cardholderEmail": {
                    "$ref": "#/components/schemas/CardholderEmail"
                  }
                }
              }
            }
          },
          "generatePaymentToken": {
            "$ref": "#/components/schemas/Payment-GeneratePaymentToken"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "CapturePaymentRequest": {
        "title": "CapturePaymentRequest",
        "type": "object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to capture, which must be less than or equal to the\noriginal amount. Any additional amount will be automatically refunded.\n"
          }
        }
      },
      "CancelPaymentRequest": {
        "title": "CancelPaymentRequest",
        "type": "object",
        "properties": {
          "cancellationReason": {
            "$ref": "#/components/schemas/Payment-CancellationReason"
          }
        }
      },
      "RefundPaymentRequest": {
        "title": "RefundPaymentRequest",
        "type": "object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to refund, which must be less than or\nequal to the original amount.\n"
          },
          "refundReason": {
            "$ref": "#/components/schemas/Payment-RefundReason"
          }
        }
      },
      "RecurringPaymentRequest": {
        "title": "RecurringPaymentRequest",
        "type": "object",
        "required": ["orderId"],
        "properties": {
          "orderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to collected by this subsequent payment. A positive integer\nrepresenting how much to charge in the smallest currency unit (e.g.,\n100 cents to charge 1.00 USD).\n"
          },
          "transactionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-TransactionType"
              }
            ],
            "default": "(same as initial payment)",
            "description": "Same as the `transactionType` parameter from\n[create payment](https://docs.monei.com/docs/apis/rest/payments-create/).\nIf not sent, it will default in the same transaction type used in the initial payment.\n"
          },
          "description": {
            "$ref": "#/components/schemas/Payment-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Payment-CallbackUrl"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "SendPaymentRequestRequest": {
        "title": "SendPaymentRequestRequest",
        "type": "object",
        "required": ["phoneNumber"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "+34500000000",
            "description": "Phone number in E.164 format. The customer will receive payment link on this phone number."
          },
          "language": {
            "$ref": "#/components/schemas/Payment-MessageLanguage"
          }
        }
      },
      "SendPaymentLinkRequest": {
        "title": "SendPaymentLinkRequest",
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer will receive payment link on this email address."
          },
          "customerPhone": {
            "type": "string",
            "example": "+34500000000",
            "description": "Phone number in E.164 format. The customer will receive payment link on this phone number."
          },
          "channel": {
            "$ref": "#/components/schemas/Payment-MessageChannel"
          },
          "language": {
            "$ref": "#/components/schemas/Payment-MessageLanguage"
          }
        }
      },
      "SendPaymentReceiptRequest": {
        "title": "SendPaymentReceiptRequest",
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer will receive payment receipt on this email address."
          },
          "customerPhone": {
            "type": "string",
            "example": "+34500000000",
            "description": "Phone number in E.164 format. The customer will receive payment receipt link on this phone number."
          },
          "channel": {
            "$ref": "#/components/schemas/Payment-MessageChannel"
          },
          "language": {
            "$ref": "#/components/schemas/Payment-MessageLanguage"
          }
        }
      },
      "Payment-Id": {
        "type": "string",
        "example": "af6029f80f5fc73a8ad2753eea0b1be0",
        "description": "Unique identifier for the payment."
      },
      "Payment-Amount": {
        "type": "integer",
        "format": "int32",
        "example": 110,
        "description": "Amount intended to be collected by this payment. A positive integer\nrepresenting how much to charge in the smallest currency unit (e.g.,\n100 cents to charge 1.00 USD).\n"
      },
      "Payment-Currency": {
        "type": "string",
        "example": "EUR",
        "description": "Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217),\nin uppercase. Must be a supported currency.\n"
      },
      "Payment-OrderId": {
        "type": "string",
        "example": "14379133960355",
        "description": "An order ID from your system. A unique identifier that can be used\nto reconcile the payment with your internal system.\n"
      },
      "Payment-Description": {
        "type": "string",
        "example": "Test Shop - #84370745531439",
        "description": "An arbitrary string attached to the payment. Often useful for\ndisplaying to users.\n"
      },
      "Payment-AuthorizationCode": {
        "type": "string",
        "example": "475816",
        "description": "Unique identifier provided by the bank performing transaction.\n"
      },
      "Payment-Status": {
        "type": "string",
        "example": "PENDING",
        "enum": [
          "SUCCEEDED",
          "PENDING",
          "FAILED",
          "CANCELED",
          "REFUNDED",
          "PARTIALLY_REFUNDED",
          "AUTHORIZED",
          "EXPIRED"
        ],
        "description": "The status of the payment."
      },
      "Payment-StatusCode": {
        "type": "string",
        "example": null,
        "description": "Payment status code.\n"
      },
      "Payment-StatusMessage": {
        "type": "string",
        "example": null,
        "description": "Human readable status message, can be displayed to a user.\n"
      },
      "Payment-RefundedAmount": {
        "type": "integer",
        "format": "int32",
        "example": null,
        "description": "Amount in cents refunded (can be less than the amount\nattribute on the payment if a partial refund was issued).\n"
      },
      "Payment-LastRefundAmount": {
        "type": "integer",
        "format": "int32",
        "example": null,
        "description": "Amount in cents refunded in the last transaction."
      },
      "Payment-LastRefundReason": {
        "type": "string",
        "example": null,
        "enum": ["duplicated", "fraudulent", "requested_by_customer"],
        "description": "The reason of the last refund transaction."
      },
      "Payment-CancellationReason": {
        "type": "string",
        "example": null,
        "enum": ["duplicated", "fraudulent", "requested_by_customer"],
        "description": "The reason for canceling the Payment."
      },
      "Payment-Customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer's email address."
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The customer's full name or business name."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The customer's phone number in E.164 format."
          }
        }
      },
      "Payment-SessionId": {
        "type": "string",
        "example": "39603551437913",
        "description": "A unique identifier within your system that adds security to the\npayment process. You need to pass the same session ID as the one\nused on the frontend to initialize MONEI Component (if you needed to).\nThis is required if a payment token (not permanent) was already\ngenerated in the frontend.\n"
      },
      "Payment-SequenceId": {
        "type": "string",
        "example": "62b23b9f3627cc38b08ff471ccd313ad",
        "description": "A permanent identifier that refers to the initial payment of\na sequence of payments. This value needs to be sent in the path\nfor `RECURRING` payments.\n"
      },
      "Payment-Sequence": {
        "type": "object",
        "description": "This field needs to be sent in order to mark the beginning of a sequence of payments\n(recurring/subscriptions, installments, and so). Specific configurations can be set\nin the inside properties (`recurring`).\n",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "example": "recurring",
            "enum": ["recurring"]
          },
          "recurring": {
            "$ref": "#/components/schemas/Payment-SequenceRecurring"
          }
        }
      },
      "Payment-SequenceRecurring": {
        "type": "object",
        "description": "Specific configurations for recurring payments.\nWill only be used when `sequence`.`type` is `recurring`.\n",
        "properties": {
          "expiry": {
            "type": "string",
            "example": "20210630",
            "default": "*(The payment method or card expiration)*",
            "description": "Date after which no further recurring payments will be performed.\nMust be formatted as `YYYYMMDD`.\n"
          },
          "frequency": {
            "type": "integer",
            "format": "int32",
            "example": 30,
            "default": 25,
            "description": "The minimum number of **days** between the different recurring payments.\n"
          }
        }
      },
      "Payment-PaymentToken": {
        "type": "string",
        "example": "7cc38b08ff471ccd313ad62b23b9f362b107560b",
        "description": "A permanent token represents a payment method used in the\npayment. Pass `generatePaymentToken: true` when you creating\na payment to generate it. You can pass it as `paymentToken`\nparameter to create other payments with the same payment\nmethod. This token does not expire, and should only be\nused server-side.\n"
      },
      "Payment-GeneratePaymentToken": {
        "type": "boolean",
        "example": false,
        "default": false,
        "description": "If set to true a permanent token that represents a payment\nmethod used in the payment will be generated.\n"
      },
      "Payment-PaymentMethod": {
        "type": "object",
        "description": "Details about the payment method at the time of the transaction.\n",
        "properties": {
          "method": {
            "type": "string",
            "example": "card",
            "enum": [
              "alipay",
              "card",
              "bizum",
              "paypal",
              "cofidis",
              "cofidisLoan",
              "mbway",
              "multibanco",
              "iDeal",
              "bancontact",
              "sofort",
              "trustly",
              "sepa",
              "klarna",
              "giropay",
              "eps",
              "blik"
            ],
            "description": "Payment method type."
          },
          "card": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCard"
          },
          "bizum": {
            "$ref": "#/components/schemas/Payment-PaymentMethodBizum"
          },
          "paypal": {
            "$ref": "#/components/schemas/Payment-PaymentMethodPaypal"
          },
          "cofidis": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCofidis"
          },
          "cofidisLoan": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCofidis"
          },
          "mbway": {
            "$ref": "#/components/schemas/Payment-PaymentMethodMbway"
          },
          "trustly": {
            "$ref": "#/components/schemas/Payment-PaymentMethodTrustly"
          },
          "sepa": {
            "$ref": "#/components/schemas/Payment-PaymentMethodSepa"
          },
          "klarna": {
            "$ref": "#/components/schemas/Payment-PaymentMethodKlarna"
          }
        }
      },
      "Payment-PaymentMethodCard": {
        "type": "object",
        "description": "Details about the card used as payment method at the time of the transaction.\n",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "brand": {
            "type": "string",
            "example": "visa",
            "enum": ["visa", "mastercard", "diners", "amex", "jcb", "unionpay", "unknown"],
            "description": "Card brand."
          },
          "type": {
            "type": "string",
            "example": "credit",
            "enum": ["debit", "credit"],
            "description": "Card type `debit` or `credit`."
          },
          "threeDSecure": {
            "type": "boolean",
            "example": false,
            "description": "Whether this transaction used 3D Secure authentication."
          },
          "threeDSecureVersion": {
            "type": "string",
            "example": "2.1.0",
            "description": "The protocol version of the 3DS challenge."
          },
          "threeDSecureFlow": {
            "type": "string",
            "example": "CHALLENGE",
            "enum": ["CHALLENGE", "FRICTIONLESS", "FRICTIONLESS_CHALLENGE", "DIRECT"],
            "description": "The flow used for 3DS authentication.\n- `CHALLENGE` - In a challenge flow, the issuer requires additional shopper interaction, either through biometrics, two-factor authentication, or similar methods based on [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) factors.\n- `FRICTIONLESS` - In a frictionless flow, the acquirer, issuer, and card scheme exchange all necessary\n    information in the background through passive authentication using the shopper's device\n    fingerprint. The transaction is completed without further shopper interaction.\n- `FRICTIONLESS_CHALLENGE` - This flow is the complete 3DS flow. It is similar to the 3DS frictionless flow but\n    includes an additional authentication step (challenge) that will be invoked if the\n    information provided in the data collection step does not suffice to determine the\n    risk-level of the transaction.\n- `DIRECT` - This transaction did not require [Strong Customer Authentication (SCA)](https://en.wikipedia.org/wiki/Strong_customer_authentication) due to the low risk\n"
          },
          "expiration": {
            "type": "integer",
            "format": "int64",
            "example": 2048544000,
            "description": "Time at which the card will expire.\nMeasured in seconds since the Unix epoch.\n"
          },
          "last4": {
            "type": "string",
            "example": "0004",
            "description": "The last four digits of the card."
          },
          "tokenizationMethod": {
            "type": "string",
            "example": "applePay",
            "enum": ["applePay", "googlePay", "clickToPay"],
            "description": "The digital wallet used to tokenize the card."
          },
          "cardholderName": {
            "type": "string",
            "example": "John Doe",
            "description": "The name of the cardholder."
          },
          "cardholderEmail": {
            "type": "string",
            "example": "email@example.com",
            "description": "The email of the cardholder."
          }
        }
      },
      "Payment-PaymentMethodBizum": {
        "type": "object",
        "description": "Details about the Bizum account used as payment method at the time of the transaction.\n",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": null,
            "description": "Phone number in E.164 format used to pay with `bizum`."
          }
        }
      },
      "Payment-PaymentMethodPaypal": {
        "type": "object",
        "description": "Details from Paypal order used as payment method at the time of the transaction.\n",
        "properties": {
          "orderId": {
            "type": "string",
            "example": null,
            "description": "The Paypal's order ID."
          }
        }
      },
      "Payment-PaymentMethodCofidis": {
        "type": "object",
        "description": "Details from Cofidis order used as payment method at the time of the transaction.\n",
        "properties": {
          "orderId": {
            "type": "string",
            "example": null,
            "description": "The Cofidis' order ID."
          }
        }
      },
      "Payment-PaymentMethodMbway": {
        "type": "object",
        "description": "Details from MBWay order used as payment method at the time of the transaction.\n",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": null,
            "description": "Phone number in E.164 format used to pay with `mbway`."
          }
        }
      },
      "Payment-PaymentMethodSepa": {
        "type": "object",
        "description": "Details from SEPA order used as payment method at the time of the transaction.\n",
        "properties": {
          "accountholderAddress": {
            "type": "string",
            "example": null,
            "description": "The address of the account holder."
          },
          "accountholderEmail": {
            "type": "string",
            "example": null,
            "description": "The email of the account holder."
          },
          "accountholderName": {
            "type": "string",
            "example": null,
            "description": "The name of the account holder."
          },
          "countryCode": {
            "type": "string",
            "example": null,
            "description": "The country code of the account holder."
          },
          "bankAddress": {
            "type": "string",
            "example": null,
            "description": "The address of the bank."
          },
          "bankCode": {
            "type": "string",
            "example": null,
            "description": "The code of the bank."
          },
          "bankName": {
            "type": "string",
            "example": null,
            "description": "The name of the bank."
          },
          "bic": {
            "type": "string",
            "example": null,
            "description": "The BIC of the bank."
          },
          "last4": {
            "type": "string",
            "example": null,
            "description": "The last 4 digits of the IBAN."
          }
        }
      },
      "Payment-PaymentMethodTrustly": {
        "type": "object",
        "description": "Details from Trustly order used as payment method at the time of the transaction.\n",
        "properties": {
          "customerId": {
            "type": "string",
            "example": null,
            "description": "The Trustly's customer ID."
          }
        }
      },
      "Payment-PaymentMethodKlarna": {
        "type": "object",
        "description": "Details from Klarna order used as payment method at the time of the transaction.\n",
        "properties": {
          "billingCategory": {
            "type": "string",
            "example": "PAY_LATER",
            "enum": ["PAY_LATER", "PAY_NOW", "SLICE_IT", "SLICE_IT_BY_CARD"]
          },
          "authPaymentMethod": {
            "type": "string",
            "example": "card",
            "enum": [
              "invoice",
              "fixed_amount",
              "pix",
              "base_account",
              "deferred_interest",
              "direct_debit",
              "direct_bank_transfer",
              "b2b_invoice",
              "card",
              "slice_it_by_card"
            ]
          }
        }
      },
      "Payment-PaymentMethodCardInput": {
        "type": "object",
        "description": "Details about the card used as payment method.\nIf provided, MONEI will try to confirm the payment directly.\n",
        "properties": {
          "number": {
            "type": "string",
            "description": "The card number, as a string without any separators."
          },
          "cvc": {
            "type": "string",
            "description": "Card security code."
          },
          "expMonth": {
            "type": "string",
            "description": "Two-digit number representing the card's expiration month."
          },
          "expYear": {
            "type": "string",
            "description": "Two-digit number representing the card's expiration year."
          },
          "cardholderName": {
            "$ref": "#/components/schemas/CardholderName"
          },
          "cardholderEmail": {
            "$ref": "#/components/schemas/CardholderEmail"
          }
        }
      },
      "Payment-PaymentMethodBizumInput": {
        "type": "object",
        "description": "Details about the Bizum account used for this payment.\nIf provided phone number is valid and registered in Bizum,\nMONEI will try to confirm the payment directly.\n",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": null,
            "description": "Phone number in E.164 format used to pay with `bizum`."
          }
        }
      },
      "Payment-PaymentMethodInput": {
        "type": "object",
        "description": "An information about a payment method used for this payment.\nWe recommend using `paymentToken` instead, as it is more secure\nway to pass sensitive payment information. Processing credit\ncard information on your server requires\n[PCI DSS compliance](https://www.investopedia.com/terms/p/pci-compliance.asp).\n",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCardInput"
          },
          "bizum": {
            "$ref": "#/components/schemas/Payment-PaymentMethodBizumInput"
          }
        }
      },
      "Payment-PaymentMethods": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "enum": [
          "alipay",
          "card",
          "bizum",
          "paypal",
          "cofidis",
          "cofidisLoan",
          "mbway",
          "multibanco",
          "iDeal",
          "bancontact",
          "sofort",
          "trustly",
          "sepa",
          "klarna",
          "giropay",
          "eps",
          "blik"
        ],
        "example": ["card", "bizum", "paypal"],
        "description": "An array of allowed payment methods (used in hosted payment\npage). Must be enabled payment methods. Possible values:\n  - `alipay`\n  - `card`\n  - `bizum`\n  - `paypal`\n  - `cofidis`\n  - `cofidisLoan`\n  - `mbway`\n  - `multibanco`\n  - `iDeal`\n  - `bancontact`\n  - `sofort`\n  - `trustly`\n  - `sepa`\n  - `klarna`\n  - `giropay`\n  - `eps`\n  - `blik`\n"
      },
      "Payment-TransactionType": {
        "type": "string",
        "example": "SALE",
        "default": "SALE",
        "enum": ["SALE", "AUTH", "PAYOUT", "VERIF"],
        "description": "Controls when the funds will be captured.\n  - `SALE` - **Default**. MONEI automatically captures funds\n    when the customer authorizes the payment.\n  - `AUTH` - Place a hold on the funds when the customer authorizes\n    the payment, but don't capture the funds until later.\n  - `PAYOUT` - Send funds to the customer\n  - `VERIF` - Verify the card without placing a hold or capturing funds.\n"
      },
      "Payment-MessageChannel": {
        "type": "string",
        "example": "EMAIL",
        "enum": ["EMAIL", "WHATSAPP", "SMS"],
        "description": "The channel used to send the payment message.\n"
      },
      "Payment-MessageLanguage": {
        "type": "string",
        "example": "en",
        "enum": ["en", "es", "ca", "pt", "de", "it", "fr"],
        "description": "The language of message sent to the customer. If not provided the default customer language is used if available."
      },
      "Payment-Shop": {
        "type": "object",
        "description": "The information about the shop (used in\n[hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)).\n",
        "properties": {
          "name": {
            "type": "string",
            "example": "Test Shop",
            "description": "The shop name."
          },
          "country": {
            "$ref": "#/components/schemas/Country"
          }
        }
      },
      "Payment-BillingDetails": {
        "type": "object",
        "description": "Billing information associated with the payment method\nat the time of the transaction.\n",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The customer's billing full name."
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The customer's billing email address."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The customer's billing phone number in E.164 format."
          },
          "company": {
            "type": "string",
            "example": null,
            "description": "Billing company name."
          },
          "taxId": {
            "type": "string",
            "example": null,
            "description": "Company tax ID."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Payment-ShippingDetails": {
        "type": "object",
        "description": "Shipping information associated with the payment.",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "The shipping customer's full name."
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com",
            "description": "The shipping customer's email address."
          },
          "phone": {
            "type": "string",
            "example": null,
            "description": "The shipping customer's phone number in E.164 format."
          },
          "company": {
            "type": "string",
            "example": null,
            "description": "Name of the company where the shipment is going."
          },
          "taxId": {
            "type": "string",
            "example": null,
            "description": "Company tax ID."
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Payment-SessionDetails": {
        "description": "Information related to the browsing session of the user\nwho initiated the payment.\n",
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Country"
          },
          "lang": {
            "$ref": "#/components/schemas/Lang"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "deviceModel": {
            "$ref": "#/components/schemas/DeviceModel"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "browserVersion": {
            "$ref": "#/components/schemas/BrowserVersion"
          },
          "os": {
            "$ref": "#/components/schemas/Os"
          },
          "osVersion": {
            "$ref": "#/components/schemas/OsVersion"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "sourceVersion": {
            "$ref": "#/components/schemas/SourceVersion"
          },
          "userAgent": {
            "$ref": "#/components/schemas/UserAgent"
          },
          "browserAccept": {
            "$ref": "#/components/schemas/BrowserAccept"
          },
          "browserColorDepth": {
            "$ref": "#/components/schemas/BrowserColorDepth"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/BrowserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/BrowserScreenWidth"
          },
          "browserTimezoneOffset": {
            "$ref": "#/components/schemas/BrowserTimezoneOffset"
          }
        }
      },
      "Payment-TraceDetails": {
        "description": "Information related to the browsing session of the user\nwho initiated the payment.\n",
        "properties": {
          "ip": {
            "$ref": "#/components/schemas/IP"
          },
          "countryCode": {
            "$ref": "#/components/schemas/Country"
          },
          "lang": {
            "$ref": "#/components/schemas/Lang"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceType"
          },
          "deviceModel": {
            "$ref": "#/components/schemas/DeviceModel"
          },
          "browser": {
            "$ref": "#/components/schemas/Browser"
          },
          "browserVersion": {
            "$ref": "#/components/schemas/BrowserVersion"
          },
          "os": {
            "$ref": "#/components/schemas/Os"
          },
          "osVersion": {
            "$ref": "#/components/schemas/OsVersion"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "sourceVersion": {
            "$ref": "#/components/schemas/SourceVersion"
          },
          "userAgent": {
            "$ref": "#/components/schemas/UserAgent"
          },
          "browserAccept": {
            "$ref": "#/components/schemas/BrowserAccept"
          },
          "browserColorDepth": {
            "$ref": "#/components/schemas/BrowserColorDepth"
          },
          "browserScreenHeight": {
            "$ref": "#/components/schemas/BrowserScreenHeight"
          },
          "browserScreenWidth": {
            "$ref": "#/components/schemas/BrowserScreenWidth"
          },
          "browserTimezoneOffset": {
            "$ref": "#/components/schemas/BrowserTimezoneOffset"
          },
          "userId": {
            "type": "string",
            "example": null,
            "description": "The ID of the user that started the operation."
          },
          "userEmail": {
            "type": "string",
            "example": "user@example.com",
            "description": "The email of the user that started the operation."
          }
        }
      },
      "Payment-NextAction": {
        "type": "object",
        "description": "If present, this property tells you what actions you need\nto take in order for your customer to fulfill a payment\nusing the provided source.\n",
        "properties": {
          "type": {
            "type": "string",
            "example": "CONFIRM",
            "enum": [
              "CONFIRM",
              "CHALLENGE",
              "FRICTIONLESS_CHALLENGE",
              "BIZUM_CHALLENGE",
              "COMPLETE"
            ],
            "description": "- `CONFIRM` - Your customer needs to be redirected to a\n  [hosted payment page](https://docs.monei.com/docs/use-prebuilt-payment-page)\n  or confirm payment using\n  [payment token](https://docs.monei.com/docs/accept-card-payment#3-submitting-the-payment-to-monei-client-side).\n  The **redirectUrl** will point to the hosted payment page.\n- `FRICTIONLESS_CHALLENGE` - Your customer needs to be redirected to the frictionless\n   3d secure challenge page provided by the bank. The **redirectUrl**\n   will point to the frictionless 3d secure challenge page provided by the bank.\n- `CHALLENGE` - Your customer needs to be redirected to the\n  3d secure challenge page provided by the bank. The **redirectUrl**\n  will point to the 3d secure challenge page provided by the bank.\n- `COMPLETE` - The payment is completed. The **redirectUrl** will be\n  the **completeUrl** if it was provided when the payment was created.\n- `BIZUM_CHALLENGE` - Your customer will be redirected to the Bizum hosted payment page.\n"
          },
          "mustRedirect": {
            "type": "boolean",
            "example": false,
            "description": "If `true` you have to redirect your customer to the **redirectUrl**\nto continue payment process.\n"
          },
          "redirectUrl": {
            "type": "string",
            "example": "https://secure.monei.com/payments/af6029f80f5fc73a8ad2753eea0b1be0",
            "description": "Redirect your customer to this url to continue payment process.\n"
          }
        }
      },
      "Payment-CallbackUrl": {
        "type": "string",
        "example": "https://example.com/checkout/callback",
        "description": "The URL to which a payment result should be sent asynchronously.\n"
      },
      "Payment-CompleteUrl": {
        "type": "string",
        "example": "https://example.com/checkout/complete",
        "description": "The URL the customer will be directed to after transaction\ncompleted (successful or failed - except if `failUrl` is provided).\n"
      },
      "Payment-FailUrl": {
        "type": "string",
        "example": "https://example.com/checkout/fail",
        "description": "The URL the customer will be directed to after transaction has failed,\ninstead of `completeUrl` (used in hosted payment page). This allows\nto provide two different URLs for successful and failed payments.\n"
      },
      "Payment-CancelUrl": {
        "type": "string",
        "example": "https://example.com/checkout/cancel",
        "description": "The URL the customer will be directed to if they decide to cancel\npayment and return to your website (used in hosted payment page).\n"
      },
      "Payment-RefundReason": {
        "type": "string",
        "example": null,
        "enum": ["duplicated", "fraudulent", "requested_by_customer"],
        "description": "The reason for refunding the Payment."
      },
      "Payment-StoreId": {
        "type": "string",
        "example": "e5f28150d9e8974c58ab5ec9c4a880f8734dcf05",
        "description": "A unique identifier of the Store. If specified the payment is attached to this Store.\n"
      },
      "Payment-PointOfSaleId": {
        "type": "string",
        "example": "fb269cccfa0cc021f5d0b8eb1421646c696213e1",
        "description": "A unique identifier of the Point of Sale. If specified the payment is attached to this Point of Sale. If there is a QR code attached to the same Point of Sale, this payment will be available by scanning the QR code.\n"
      },
      "Payment-SubscriptionId": {
        "type": "string",
        "example": "575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa",
        "description": "A unique identifier of the Subscription. If specified the payment is attached to this Subscription.\n"
      },
      "Payment-AutoRecover": {
        "type": "boolean",
        "example": false,
        "description": "If set to `true`, the new payment will be automatically created when customer visits the payment link of the previously failed payment. Is automatically set to `true` if `completeUrl` is not provided.(set this value to `true` to create \"Pay By Link\" payments)."
      },
      "Payment-ExpireAt": {
        "type": "number",
        "format": "int64",
        "example": 1663581391,
        "description": "Payment expiration time."
      },
      "Subscription": {
        "title": "Subscription",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Subscription-Id"
          },
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "description": {
            "$ref": "#/components/schemas/Subscription-Description"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "livemode": {
            "$ref": "#/components/schemas/Livemode"
          },
          "status": {
            "$ref": "#/components/schemas/Subscription-Status"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "interval": {
            "$ref": "#/components/schemas/Subscription-Interval"
          },
          "intervalCount": {
            "$ref": "#/components/schemas/Subscription-IntervalCount"
          },
          "pauseIntervalCount": {
            "$ref": "#/components/schemas/Subscription-PauseIntervalCount"
          },
          "lastOrderId": {
            "$ref": "#/components/schemas/Payment-OrderId"
          },
          "lastPayment": {
            "$ref": "#/components/schemas/Subscription-LastPayment"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Subscription-PaymentMethod"
          },
          "currentPeriodStart": {
            "$ref": "#/components/schemas/Subscription-CurrentPeriodStart"
          },
          "currentPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-CurrentPeriodEnd"
          },
          "trialPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-TrialPeriodEnd"
          },
          "nextPaymentAt": {
            "$ref": "#/components/schemas/Subscription-NextPaymentAt"
          },
          "retryCount": {
            "$ref": "#/components/schemas/Subscription-RetryCount"
          },
          "retrySchedule": {
            "$ref": "#/components/schemas/Subscription-RetrySchedule"
          },
          "cancelAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-CancelAtPeriodEnd"
          },
          "pauseAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-PauseAtPeriodEnd"
          },
          "traceDetails": {
            "$ref": "#/components/schemas/Payment-TraceDetails"
          },
          "sequenceId": {
            "$ref": "#/components/schemas/Payment-SequenceId"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Subscription-CallbackUrl"
          },
          "paymentCallbackUrl": {
            "$ref": "#/components/schemas/Subscription-PaymentCallbackUrl"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "createdAt": {
            "$ref": "#/components/schemas/CreatedAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        }
      },
      "CreateSubscriptionRequest": {
        "title": "CreateSubscriptionRequest",
        "type": "object",
        "required": ["amount", "currency", "interval"],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "currency": {
            "$ref": "#/components/schemas/Payment-Currency"
          },
          "interval": {
            "$ref": "#/components/schemas/Subscription-Interval"
          },
          "intervalCount": {
            "$ref": "#/components/schemas/Subscription-IntervalCount"
          },
          "description": {
            "$ref": "#/components/schemas/Subscription-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "trialPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-TrialPeriodEnd"
          },
          "trialPeriodDays": {
            "$ref": "#/components/schemas/Subscription-TrialPeriodDays"
          },
          "retrySchedule": {
            "$ref": "#/components/schemas/Subscription-RetrySchedule"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Subscription-CallbackUrl"
          },
          "paymentCallbackUrl": {
            "$ref": "#/components/schemas/Subscription-PaymentCallbackUrl"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "UpdateSubscriptionRequest": {
        "title": "UpdateSubscriptionRequest",
        "type": "object",
        "required": ["id"],
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Payment-Amount"
          },
          "interval": {
            "$ref": "#/components/schemas/Subscription-Interval"
          },
          "intervalCount": {
            "$ref": "#/components/schemas/Subscription-IntervalCount"
          },
          "description": {
            "$ref": "#/components/schemas/Subscription-Description"
          },
          "customer": {
            "$ref": "#/components/schemas/Payment-Customer"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/Payment-BillingDetails"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/Payment-ShippingDetails"
          },
          "trialPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-TrialPeriodEnd"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/Subscription-CallbackUrl"
          },
          "paymentCallbackUrl": {
            "$ref": "#/components/schemas/Subscription-PaymentCallbackUrl"
          },
          "pauseAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-PauseAtPeriodEnd"
          },
          "cancelAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-CancelAtPeriodEnd"
          },
          "pauseIntervalCount": {
            "$ref": "#/components/schemas/Subscription-PauseIntervalCount"
          },
          "retrySchedule": {
            "$ref": "#/components/schemas/Subscription-RetrySchedule"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "ActivateSubscriptionRequest": {
        "title": "ActivateSubscriptionRequest",
        "type": "object",
        "properties": {
          "paymentToken": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-PaymentToken"
              }
            ],
            "description": "A payment token generated by monei.js\n[Components](https://docs.monei.com/docs/monei-js-overview) or a paymentToken\n[saved after a previous successful payment](https://docs.monei.com/docs/save-payment-method).\nIn case of the first one, you will also need to send the `sessionId`\nused to generate the token in the first place.\n"
          },
          "sessionId": {
            "$ref": "#/components/schemas/Payment-SessionId"
          },
          "addAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Payment-Amount"
              }
            ],
            "description": "The amount to be added to the subscription's initial payment. A positive integer\nrepresenting how much to charge in the smallest currency unit (e.g.,\n100 cents to charge 1.00 USD).\n"
          },
          "sequenceId": {
            "$ref": "#/components/schemas/Payment-SequenceId"
          },
          "completeUrl": {
            "$ref": "#/components/schemas/Payment-CompleteUrl"
          },
          "failUrl": {
            "$ref": "#/components/schemas/Payment-FailUrl"
          },
          "cancelUrl": {
            "$ref": "#/components/schemas/Payment-CancelUrl"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "CancelSubscriptionRequest": {
        "title": "CancelSubscriptionRequest",
        "type": "object",
        "properties": {
          "cancelAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-CancelAtPeriodEnd"
          }
        }
      },
      "PauseSubscriptionRequest": {
        "title": "PauseSubscriptionRequest",
        "type": "object",
        "properties": {
          "pauseAtPeriodEnd": {
            "$ref": "#/components/schemas/Subscription-PauseAtPeriodEnd"
          },
          "pauseIntervalCount": {
            "$ref": "#/components/schemas/Subscription-PauseIntervalCount"
          }
        }
      },
      "SendSubscriptionLinkRequest": {
        "title": "SendSubscriptionLinkRequest",
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "format": "email",
            "description": "Customer email to send the subscription link to"
          },
          "customerPhone": {
            "type": "string",
            "description": "Customer phone number to send the subscription link to"
          },
          "channel": {
            "type": "string",
            "enum": ["EMAIL", "WHATSAPP", "SMS"],
            "description": "Channel to use for sending the subscription link"
          },
          "language": {
            "type": "string",
            "description": "Language to use for the subscription link message"
          }
        }
      },
      "SendSubscriptionStatusRequest": {
        "title": "SendSubscriptionStatusRequest",
        "type": "object",
        "properties": {
          "customerEmail": {
            "type": "string",
            "format": "email",
            "description": "Customer email to send the subscription status to"
          },
          "customerPhone": {
            "type": "string",
            "description": "Customer phone number to send the subscription status to"
          },
          "channel": {
            "type": "string",
            "enum": ["EMAIL", "WHATSAPP", "SMS"],
            "description": "Channel to use for sending the subscription status"
          },
          "language": {
            "type": "string",
            "description": "Language to use for the subscription status message"
          }
        }
      },
      "Subscription-Id": {
        "type": "string",
        "example": "575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa",
        "description": "Unique identifier for the subscription."
      },
      "Subscription-Description": {
        "type": "string",
        "example": "MoonMail Monthly Lite",
        "description": "An arbitrary string attached to the subscription. Often useful for\ndisplaying to users.\n"
      },
      "Subscription-Status": {
        "type": "string",
        "example": "PENDING",
        "enum": ["PENDING", "EXPIRED", "TRIALING", "ACTIVE", "PAST_DUE", "PAUSED", "CANCELED"],
        "description": "The status of the subscription."
      },
      "Subscription-PaymentMethod": {
        "type": "object",
        "description": "Details about the payment method at the time of the transaction.\n",
        "properties": {
          "method": {
            "type": "string",
            "example": "card",
            "enum": ["card"],
            "description": "Subscription method type."
          },
          "card": {
            "$ref": "#/components/schemas/Payment-PaymentMethodCard"
          }
        }
      },
      "Subscription-PaymentMethodCard": {
        "type": "object",
        "description": "Details about the card used as payment method at the time of the transaction.\n",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/Country"
          },
          "brand": {
            "type": "string",
            "example": "visa",
            "enum": ["visa", "mastercard", "diners", "amex", "jcb", "unionpay", "unknown"],
            "description": "Card brand."
          },
          "type": {
            "type": "string",
            "example": "credit",
            "enum": ["debit", "credit"],
            "description": "Card type `debit` or `credit`."
          },
          "threeDSecure": {
            "type": "boolean",
            "example": false,
            "description": "Wether this transaction used 3D Secure authentication."
          },
          "threeDSecureVersion": {
            "type": "string",
            "example": "2.1.0",
            "description": "The protocol version of the 3DS challenge."
          },
          "expiration": {
            "type": "integer",
            "format": "int64",
            "example": 2048544000,
            "description": "Time at which the card will expire.\nMeasured in seconds since the Unix epoch.\n"
          },
          "last4": {
            "type": "string",
            "example": "0004",
            "description": "The last four digits of the card."
          }
        }
      },
      "Subscription-CallbackUrl": {
        "type": "string",
        "example": "https://example.com/subscriptions/callback",
        "description": "The URL will be called each time subscription status changes. You will receive a subscription object in the body of the request.\n"
      },
      "Subscription-PaymentCallbackUrl": {
        "type": "string",
        "example": "https://example.com/payments/callback",
        "description": "The URL will be called each time subscription creates a new payments. You will receive the payment object in the body of the request.\n"
      },
      "Subscription-Interval": {
        "type": "string",
        "example": "month",
        "enum": ["day", "week", "month", "year"],
        "description": "Subscription interval."
      },
      "Subscription-IntervalCount": {
        "type": "integer",
        "format": "int32",
        "example": 1,
        "description": "Number of intervals between subscription payments."
      },
      "Subscription-PauseIntervalCount": {
        "type": "integer",
        "format": "int32",
        "example": 1,
        "description": "Number of intervals when subscription will be paused before it activates again."
      },
      "Subscription-LastPayment": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Payment-Id"
          },
          "status": {
            "$ref": "#/components/schemas/Payment-Status"
          },
          "statusCode": {
            "$ref": "#/components/schemas/Payment-StatusCode"
          },
          "statusMessage": {
            "$ref": "#/components/schemas/Payment-StatusMessage"
          }
        }
      },
      "Subscription-NextPaymentAt": {
        "type": "integer",
        "format": "int64",
        "example": 1636366897,
        "description": "The date when the next payment will be made."
      },
      "Subscription-CurrentPeriodStart": {
        "type": "number",
        "format": "int64",
        "example": 1636366897,
        "description": "The start date of the current subscription period. Measured in seconds since the Unix epoch."
      },
      "Subscription-CurrentPeriodEnd": {
        "type": "number",
        "format": "int64",
        "example": 1636366897,
        "description": "The end date of the current subscription period. Measured in seconds since the Unix epoch."
      },
      "Subscription-TrialPeriodEnd": {
        "type": "number",
        "format": "int64",
        "example": 1636366897,
        "description": "The end date of the trial period. Measured in seconds since the Unix epoch."
      },
      "Subscription-RetryCount": {
        "type": "integer",
        "format": "int32",
        "example": 1,
        "description": "Number of retries left for the subscription."
      },
      "Subscription-CancelAtPeriodEnd": {
        "type": "boolean",
        "example": false,
        "description": "If true, the subscription will be canceled at the end of the current period.\n"
      },
      "Subscription-PauseAtPeriodEnd": {
        "type": "boolean",
        "example": false,
        "description": "If true, the subscription will be paused at the end of the current period.\n"
      },
      "Subscription-TrialPeriodDays": {
        "type": "integer",
        "format": "int32",
        "example": 7,
        "description": "Number of days the trial period lasts."
      },
      "Subscription-RetrySchedule": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "interval": {
              "type": "string",
              "enum": ["day", "week", "month", "year"],
              "example": "day",
              "description": "The unit of time to wait before the retry attempt."
            },
            "intervalCount": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 31,
              "example": 3,
              "description": "The number of intervals to wait before the retry attempt."
            }
          },
          "required": ["interval", "intervalCount"]
        },
        "example": [
          {
            "interval": "day",
            "intervalCount": 1
          },
          {
            "interval": "day",
            "intervalCount": 3
          },
          {
            "interval": "week",
            "intervalCount": 1
          }
        ],
        "description": "Defines a custom schedule for retrying failed subscription payments. Each entry in the array specifies how long to wait before attempting the next payment retry.\nIf not specified, the system's default retry schedule will be used.\n"
      }
    },
    "parameters": {
      "paymentId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The payment ID",
        "schema": {
          "$ref": "#/components/schemas/Payment-Id"
        }
      },
      "sequenceId": {
        "name": "sequenceId",
        "in": "path",
        "required": true,
        "description": "The sequence ID",
        "schema": {
          "$ref": "#/components/schemas/Payment-SequenceId"
        }
      },
      "subscriptionId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "The subscription ID",
        "schema": {
          "$ref": "#/components/schemas/Subscription-Id"
        }
      }
    },
    "examples": {
      "CreatePaymentBasicRequest": {
        "value": {
          "amount": 110,
          "currency": "EUR",
          "orderId": "14379133960355",
          "paymentToken": "7cc38b08ff471ccd313ad62b23b9f362b107560b",
          "callbackUrl": "https://example.com/checkout/callback",
          "completeUrl": "https://example.com/checkout/complete"
        }
      },
      "ConfirmPaymentBasicRequest": {
        "value": {
          "paymentToken": "7cc38b08ff471ccd313ad62b23b9f362b107560b"
        }
      },
      "CapturePaymentFullRequest": {
        "value": {
          "amount": 100
        }
      },
      "CancelPaymentFullRequest": {
        "value": {
          "cancellationReason": "requested_by_customer"
        }
      },
      "RefundPaymentFullRequest": {
        "value": {
          "amount": 50,
          "refundReason": "requested_by_customer"
        }
      },
      "RecurringPaymentBasicRequest": {
        "value": {
          "orderId": "14379133960366",
          "callbackUrl": "https://example.com/checkout/callback"
        }
      },
      "SendPaymentFullRequest": {
        "value": {
          "phoneNumber": "+34500000000",
          "language": "es"
        }
      },
      "SendPaymentLinkFullRequest": {
        "value": {
          "customerEmail": "john.doe@example.com",
          "language": "es"
        }
      },
      "SendPaymentReceiptFullRequest": {
        "value": {
          "customerEmail": "john.doe@example.com",
          "language": "es"
        }
      },
      "CreateSubscriptionBasicRequest": {
        "value": {
          "customer": {
            "name": "John Doe",
            "email": "john.doe@monei.com"
          },
          "amount": 110,
          "currency": "EUR",
          "interval": "month",
          "intervalCount": 1,
          "description": "MoonMail Lite Monthly",
          "callbackUrl": "https://example.com/subscription/callback",
          "paymentCallbackUrl": "https://example.com/payment/callback"
        }
      },
      "ActivateSubscriptionBasicRequest": {
        "value": {
          "paymentToken": "7cc38b08ff471ccd313ad62b23b9f362b107560b"
        }
      },
      "CancelSubscriptionBasicRequest": {
        "value": {
          "cancelAtPeriodEnd": true
        }
      },
      "PauseSubscriptionBasicRequest": {
        "value": {
          "pauseAtPeriodEnd": true
        }
      },
      "UpdateSubscriptionBasicRequest": {
        "value": {
          "amount": 990
        }
      },
      "SendSubscriptionLinkBasicRequest": {
        "value": {
          "customerEmail": "john.doe@monei.com",
          "channel": "EMAIL",
          "language": "en"
        }
      },
      "SendSubscriptionStatusBasicRequest": {
        "value": {
          "customerEmail": "john.doe@monei.com",
          "channel": "EMAIL",
          "language": "en"
        }
      }
    }
  },
  "paths": {
    "/apple-pay/domains": {
      "post": {
        "operationId": "applePayDomain_register",
        "summary": "Register Domain",
        "description": "<p>Registers a domain with Apple Pay.</p>\n<p>This endpoint allows you to register your website domain with Apple Pay, which is required\nbefore you can accept Apple Pay payments on your website. The domain must be accessible\nvia HTTPS and have a valid SSL certificate.</p>\n<p>Before registering, you must download\nthis <a href=\"https://assets.monei.com/apple-pay/apple-developer-merchantid-domain-association/\">domain association file</a>\nand host it at <code>/.well-known/apple-developer-merchantid-domain-association</code> on your site.</p>\n<p>For example, if you&#39;re registering <code>example.com</code>, make that file available\nat <code>https://example.com/.well-known/apple-developer-merchantid-domain-association</code>.</p>\n<p>After registration, Apple will verify your domain. Once verified, you can display\nApple Pay buttons and process Apple Pay payments on your website.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Apple Pay Domain"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterApplePayDomainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegisterApplePayDomainResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Register your domain with Apple to enable Apple Pay on your website\nmonei.applePayDomain.register({\n  domainName: 'example.com'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\RegisterApplePayDomainRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for registering a domain with Apple Pay\n$request = new RegisterApplePayDomainRequest([\n    'domain_name' => 'example.com'\n]);\n\n// Register your domain with Apple to enable Apple Pay on your website\n$response = $monei->applePayDomain->register($request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\n\n# Register your domain with Apple to enable Apple Pay on your website\nmonei.apple_pay_domain.register(domain_name=\"example.com\")\n"
          }
        ]
      }
    },
    "/bizum/validate-phone": {
      "post": {
        "operationId": "bizum_validatePhone",
        "summary": "Validate Phone",
        "description": "<p>Validates if a phone number is registered with Bizum.</p>\n<p>Use this endpoint to check if a customer&#39;s phone number can be used for Bizum payments\nbefore attempting to process a payment. This helps provide a better user experience by\npreventing failed payment attempts for non-registered numbers.</p>\n<p>The response will indicate whether the phone number is valid for Bizum payments.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Bizum"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateBizumPhoneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ValidateBizumPhoneResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Validate if a phone number is registered in Bizum\nmonei.bizum.validatePhone({\n  accountId: '6dccce85-b290-40c2-bb9c-57bc7ecfaf04',\n  phoneNumber: '+34600000000'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Validate if a phone number is registered in Bizum\n$response = $monei->bizum->validatePhone([\n    'accountId' => '6dccce85-b290-40c2-bb9c-57bc7ecfaf04',\n    'phoneNumber' => '+34600000000'\n]);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\n\n# Validate if a phone number is registered in Bizum\nmonei.bizum.validate_phone(\n    account_id=\"6dccce85-b290-40c2-bb9c-57bc7ecfaf04\", phone_number=\"+34600000000\"\n)\n"
          }
        ]
      }
    },
    "/payment-methods": {
      "get": {
        "operationId": "paymentMethods_get",
        "summary": "Get Payment Methods",
        "description": "<p>Retrieve available payment methods for an account or a specific payment.</p>\n<p>You can provide either an <code>accountId</code> or a <code>paymentId</code> as a query parameter to get the available payment methods.</p>\n<p>When providing a <code>paymentId</code>, the response will include additional payment-specific information such as amount and currency.\nThis is useful when you want to show payment options that are specifically available for a particular transaction.</p>\n<p>When providing an <code>accountId</code>, the response will include all payment methods available for that account based on\nthe merchant&#39;s configuration and supported payment methods.</p>\n",
        "tags": ["Payment Methods"],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "The ID of the account to get payment methods for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "query",
            "description": "The ID of the payment to get payment methods for",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetPaymentMethodsResponse"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Get payment methods by accountId\nmonei.paymentMethods.get({accountId: '6dccce85-b290-40c2-bb9c-57bc7ecfaf04'});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\GetPaymentMethodsRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for getting payment methods\n$request = new GetPaymentMethodsRequest([\n    'account_id' => '6dccce85-b290-40c2-bb9c-57bc7ecfaf04'\n]);\n\n// Get payment methods by accountId\n$paymentMethods = $monei->paymentMethods->get($request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\n\n# Get payment methods by accountId\nmonei.payment_methods.get(accountId=\"6dccce85-b290-40c2-bb9c-57bc7ecfaf04\")\n"
          }
        ]
      }
    },
    "/payments": {
      "post": {
        "operationId": "payments_create",
        "summary": "Create Payment",
        "description": "<p>Creates a new payment with the specified parameters.</p>\n<p>You can create a payment in two ways:</p>\n<ol>\n<li><strong>Immediate processing</strong>: Provide a <code>paymentToken</code> or <code>paymentMethod</code> - The payment will be processed instantly</li>\n<li><strong>Deferred processing</strong>: Create without payment details - The payment remains in <code>PENDING</code> status until you\nconfirm it later using the <a href=\"#operation/payments_confirm\">confirm endpoint</a></li>\n</ol>\n<p>When creating a payment without payment details, you can redirect customers to the hosted payment page\nwhere they can select their preferred payment method and complete the transaction.</p>\n<p>For immediate processing, use one of these token options:</p>\n<ul>\n<li>A temporary <code>paymentToken</code> generated on the frontend using <a href=\"https://docs.monei.com/docs/monei-js-overview\">monei.js Components</a></li>\n<li>A permanent <code>paymentToken</code> from a previous successful payment (when <code>generatePaymentToken: true</code> was included)</li>\n</ul>\n<p>Permanent tokens enable one-click checkout experiences for returning customers by allowing you to\nsecurely store and reuse payment details without requiring customers to re-enter their information.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/CreatePaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.create({\n  amount: 110, // 1.10 EUR\n  currency: 'EUR',\n  orderId: '14379133960355',\n  paymentToken: '7cc38b08ff471ccd313ad62b23b9f362b107560b',\n  callbackUrl: 'https://example.com/checkout/callback',\n  completeUrl: 'https://example.com/checkout/complete',\n  customer: {\n    name: 'John Doe',\n    email: 'example@example.com',\n    phone: '+49123456789'\n  }\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->create([\n    'amount' => 110, // 1.10 EUR\n    'orderId' => '14379133960355',\n    'currency' => 'EUR',\n    'paymentToken' => '7cc38b08ff471ccd313ad62b23b9f362b107560b',\n    'callbackUrl' => 'https://example_com/checkout/callback',\n    'completeUrl' => 'https://example.com/checkout/complete'\n]);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import CreatePaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.create(CreatePaymentRequest(\n    amount=110,\n    currency=\"EUR\",\n    order_id=\"14379133960355\",\n    payment_token=\"7cc38b08ff471ccd313ad62b23b9f362b107560b\",\n    callback_url=\"https://example.com/checkout/callback\",\n    complete_url=\"https://example.com/checkout/complete\"\n))\n"
          }
        ]
      }
    },
    "/payments/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "get": {
        "operationId": "payments_get",
        "summary": "Get Payment",
        "description": "<p>Retrieves the complete details of an existing payment by its unique ID.</p>\n<p>This endpoint returns all available information about the payment, including its current status,\namount, customer details, timestamps, and transaction history. Use this to check the status of\na payment, verify payment details, or retrieve information for your records.</p>\n<p>Supply the unique payment ID that was returned from your previous request.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.get('832b77d1a4b372349a7ae0bb1b2af059');\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->get('832b77d1a4b372349a7ae0bb1b2af059');\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.get(\"pay_7cc38b08ff471ccd313ad62b23b9f362\")\n"
          }
        ]
      }
    },
    "/payments/{id}/confirm": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_confirm",
        "summary": "Confirm Payment",
        "description": "<p>Confirms a payment that was created without payment details. This endpoint can only be used with\npayments in <code>PENDING</code> status.</p>\n<p>The two-step payment flow:</p>\n<ol>\n<li><strong>Create</strong>: First, create a payment without payment details (status: <code>PENDING</code>)</li>\n<li><strong>Confirm</strong>: Then provide payment details to complete the transaction</li>\n</ol>\n<p>When confirming a payment, you can use:</p>\n<ul>\n<li>A newly generated <code>paymentToken</code> from <a href=\"https://docs.monei.com/docs/monei-js-overview\">monei.js Components</a></li>\n<li>A permanent <code>paymentToken</code> from a previous payment (generated with <code>generatePaymentToken: true</code>)</li>\n</ul>\n<p>Using permanent payment tokens enables one-click checkout experiences for returning customers\nwithout requiring them to re-enter their payment information.</p>\n<p>You can provide additional customer information during confirmation, which will override\nany corresponding information originally passed in the payment creation request.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/ConfirmPaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.confirm('832b77d1a4b372349a7ae0bb1b2af059', {\n  paymentToken: '7cc38b08ff471ccd313ad62b23b9f362b107560b'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->confirm(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['paymentToken' => '7cc38b08ff471ccd313ad62b23b9f362b107560b']\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import ConfirmPaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.confirm(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    ConfirmPaymentRequest(payment_token=\"7cc38b08ff471ccd313ad62b23b9f362b107560b\"),\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/capture": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_capture",
        "summary": "Capture Payment",
        "description": "<p>Captures funds from a previously authorized payment. This endpoint can only\nbe used with payments in <code>AUTHORIZED</code> status.</p>\n<p>This operation completes the two-step authorization flow:</p>\n<ol>\n<li><strong>Authorize</strong>: Create a payment with <code>transactionType: AUTH</code> to reserve funds</li>\n<li><strong>Capture</strong>: Transfer the reserved funds to your account when ready to fulfill the order</li>\n</ol>\n<p><strong>Important</strong>: Authorized payments expire after exactly seven days. After expiration,\nthey will be marked as <code>EXPIRED</code> and can no longer be captured. Be sure to capture\nfunds within this timeframe or communicate with your customer about a new payment.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CapturePaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/CapturePaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.capture(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  {amount: 100} // 1.00 EUR\n);\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->capture(\n   '832b77d1a4b372349a7ae0bb1b2af059',\n   ['amount' => 100] // 1.00 EUR\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import CapturePaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.capture(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    CapturePaymentRequest(amount=110)\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_cancel",
        "summary": "Cancel Payment",
        "description": "<p>Releases reserved funds from a previously authorized payment. This endpoint can only\nbe used with payments in <code>AUTHORIZED</code> status.</p>\n<p>This operation is part of the two-step authorization flow:</p>\n<ol>\n<li><strong>Authorize</strong>: Create a payment with <code>transactionType: AUTH</code> to reserve funds</li>\n<li><strong>Cancel</strong>: Release the reserved funds if you decide not to capture the payment</li>\n</ol>\n<p>Cancellation makes the reserved funds available to the customer again and prevents you from\nbeing able to capture those funds in the future. Once cancelled, an authorization cannot be reactivated.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/CancelPaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei, PaymentCancellationReason} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.cancel('832b77d1a4b372349a7ae0bb1b2af059', {\n  cancellationReason: PaymentCancellationReason.RequestedByCustomer\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->cancel(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['cancellationReason' => 'requested_by_customer']\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import CancelPaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.cancel(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    CancelPaymentRequest(reason=\"Customer requested cancellation\")\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/refund": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_refund",
        "summary": "Refund Payment",
        "description": "<p>Returns funds from a completed payment back to the customer&#39;s original payment method.</p>\n<p><strong>Refund options:</strong></p>\n<ul>\n<li><strong>Full refund</strong>: Return the entire payment amount</li>\n<li><strong>Partial refund</strong>: Specify an amount less than the original payment</li>\n<li><strong>Multiple partial refunds</strong>: Issue several partial refunds until the total payment amount is reached</li>\n</ul>\n<p><strong>Limitations:</strong></p>\n<ul>\n<li>You can only refund payments that have been successfully processed</li>\n<li>A payment can only be refunded up to its original amount</li>\n<li>Once fully refunded, a payment cannot be refunded again</li>\n<li>Attempting to refund more than the remaining available amount will result in an error</li>\n</ul>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundPaymentRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/RefundPaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei, PaymentRefundReason} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.refund('832b77d1a4b372349a7ae0bb1b2af059', {\n  refundReason: PaymentRefundReason.RequestedByCustomer\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->refund(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  ['refundReason' => 'requested_by_customer']\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import RefundPaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.refund(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    RefundPaymentRequest(amount=110, reason=\"Customer requested refund\")\n)\n"
          }
        ]
      }
    },
    "/payments/{sequenceId}/recurring": {
      "parameters": [
        {
          "$ref": "#/components/parameters/sequenceId"
        }
      ],
      "post": {
        "operationId": "payments_recurring",
        "summary": "Recurring Payment",
        "description": "<p>Creates a subsequent charge using the payment details from a previous transaction.</p>\n<p>This endpoint enables recurring billing and subscription payments by:</p>\n<ul>\n<li>Using the same payment method as the original payment</li>\n<li>Charging the customer without requiring them to re-enter payment details</li>\n<li>Supporting variable or fixed amounts (defaults to the original payment amount if not specified)</li>\n</ul>\n<p><strong>Prerequisites:</strong></p>\n<ol>\n<li>The initial payment must be created with the <code>sequence</code> parameter</li>\n<li>The initial payment will return a <code>sequenceId</code> in the response</li>\n<li>This <code>sequenceId</code> must be provided in the URL path when making subsequent recurring charges</li>\n</ol>\n<p>Ideal for subscription services, membership renewals, and installment payments.</p>\n<p><strong>Need more advanced subscription management?</strong>\nFor comprehensive subscription management with features like billing cycles, trial periods,\nand automatic recurring billing, consider using the <a href=\"/docs/apis/rest/subscriptions/\">Subscriptions API</a>\ninstead. It provides a complete solution for creating and managing subscription-based services.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringPaymentRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/RecurringPaymentBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.recurring('7cc38b08ff471ccd313ad62b23b9f362b107560b', {\n  orderId: '14379133960355',\n  callbackUrl: 'https://example.com/checkout/callback'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->recurring('7cc38b08ff471ccd313ad62b23b9f362b107560b', [\n  'orderId' => '14379133960355',\n  'callbackUrl' => 'https://example.com/checkout/callback',\n]);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import RecurringPaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.recurring(RecurringPaymentRequest(\n    amount=110,\n    currency=\"EUR\",\n    order_id=\"14379133960355\",\n    payment_method_id=\"pm_7cc38b08ff471ccd313ad62b23b9f362\",\n    customer_id=\"cus_7cc38b08ff471ccd313ad62b23b9f362\"\n))\n"
          }
        ]
      }
    },
    "/payments/{id}/rtp": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_sendRequest",
        "summary": "Send Payment Request",
        "description": "<p>Sends a direct payment request to the customer&#39;s phone with smart channel selection.</p>\n<p><strong>Smart delivery logic based on customer phone capabilities:</strong></p>\n<ul>\n<li>If the phone number is registered with Bizum and that payment method is available:\nThe customer receives a push notification in their banking app to instantly approve the payment</li>\n<li>If Bizum is not available or the phone is not registered with Bizum:\nThe customer receives a payment link via WhatsApp to complete the payment</li>\n</ul>\n<p>This endpoint provides a streamlined payment experience, especially for Spanish customers\nwith Bizum integration, enabling quick and convenient mobile payments.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPaymentRequestRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/SendPaymentFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.sendRequest('832b77d1a4b372349a7ae0bb1b2af059', {\n  phoneNumber: '+34500000000',\n  language: 'es'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->sendRequest(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  [\n    'phoneNumber' => '+34500000000',\n    'language' => 'es'\n  ]\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import SendPaymentRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.send_request(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    SendPaymentRequest(phone_number=\"+34600000000\")\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/link": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_sendLink",
        "summary": "Send Payment Link",
        "description": "<p>Sends a payment link to the customer through their preferred communication channel.</p>\n<p><strong>This API can only be used for payments with the following status:</strong></p>\n<ul>\n<li>Pending</li>\n</ul>\n<p><strong>Delivery channels are automatically selected based on available customer information:</strong></p>\n<ul>\n<li>If customer email is available: Link is sent via email</li>\n<li>If customer phone is available: Link is sent via WhatsApp</li>\n<li>If WhatsApp delivery fails: Link is sent via SMS as a fallback</li>\n</ul>\n<p>The payment link allows customers to complete the payment at their convenience using\ntheir preferred payment method on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the payment record.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPaymentLinkRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/SendPaymentLinkFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.sendLink('832b77d1a4b372349a7ae0bb1b2af059', {\n  customerEmail: 'john.doe@example.com',\n  language: 'es'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\SendPaymentLinkRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for sending a payment link\n$request = new SendPaymentLinkRequest([\n  'customer_email' => 'john.doe@example.com',\n  'language' => 'es'\n]);\n\n// Send payment link\n$monei->payments->sendLink('832b77d1a4b372349a7ae0bb1b2af059', $request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import SendPaymentLinkRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.send_link(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    SendPaymentLinkRequest(email=\"customer@example.com\")\n)\n"
          }
        ]
      }
    },
    "/payments/{id}/receipt": {
      "parameters": [
        {
          "$ref": "#/components/parameters/paymentId"
        }
      ],
      "post": {
        "operationId": "payments_sendReceipt",
        "summary": "Send Payment Receipt",
        "description": "<p>Sends a payment receipt to the customer through their preferred communication channel.</p>\n<p><strong>This API can only be used for payments with the following status:</strong></p>\n<ul>\n<li>Succeeded</li>\n</ul>\n<p><strong>Delivery channels are automatically selected based on available customer information:</strong></p>\n<ul>\n<li>If customer email is available: Receipt is sent via email</li>\n<li>If customer phone is available: Receipt is sent via WhatsApp</li>\n<li>If WhatsApp delivery fails: Receipt is sent via SMS as a fallback</li>\n</ul>\n<p>The receipt includes payment details such as amount, date, transaction ID, and merchant\ninformation, providing customers with a record of their successful transaction. If no customer contact information is provided, the system will use the details stored in the payment record.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Payments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPaymentReceiptRequest"
              },
              "examples": {
                "full": {
                  "$ref": "#/components/examples/SendPaymentReceiptFullRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Payment"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "const {Monei} = require('@monei-js/node-sdk');\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.payments.sendReceipt('832b77d1a4b372349a7ae0bb1b2af059', {\n  customerEmail: 'john.doe@example.com',\n  language: 'es'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->payments->sendReceipt(\n  '832b77d1a4b372349a7ae0bb1b2af059',\n  [\n    'customerEmail' => 'john.doe@example.com',\n    'language' => 'es'\n  ]\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import SendPaymentReceiptRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.payments.send_receipt(\n    \"pay_7cc38b08ff471ccd313ad62b23b9f362\",\n    SendPaymentReceiptRequest(email=\"customer@example.com\")\n)\n"
          }
        ]
      }
    },
    "/subscriptions": {
      "post": {
        "operationId": "subscriptions_create",
        "summary": "Create Subscription",
        "description": "<p>Creates a new subscription with the specified parameters.</p>\n<p><strong>Subscription Lifecycle</strong>:</p>\n<ol>\n<li>When first created, the subscription has a <code>PENDING</code> status</li>\n<li>To initiate billing, you must call the <a href=\"#operation/subscriptions_activate\">activate endpoint</a> with payment details</li>\n<li>Once activated, the subscription will automatically bill according to the configured interval</li>\n</ol>\n<p><strong>Key Configuration Parameters</strong>:</p>\n<ul>\n<li><strong>Billing settings</strong>: Amount, currency, interval (daily, weekly, monthly, yearly)</li>\n<li><strong>Schedule customization</strong>: Interval count, trial period duration</li>\n<li><strong>Customer information</strong>: Contact details, billing and shipping addresses</li>\n<li><strong>Communication</strong>: Callback URLs for webhook notifications about subscription events</li>\n</ul>\n<p><strong>Best Practices</strong>:</p>\n<ul>\n<li>Set clear, descriptive names for subscriptions to help with identification</li>\n<li>Configure appropriate webhook notifications to monitor subscription status changes</li>\n<li>Consider offering trial periods to increase customer conversion rates</li>\n<li>Use metadata to store additional information relevant to your business logic</li>\n</ul>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/CreateSubscriptionBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.create({\n  customer: {\n    name: 'John Doe',\n    email: 'john.doe@monei.com'\n  },\n  amount: 110,\n  currency: 'EUR',\n  interval: 'month',\n  intervalCount: 1,\n  description: 'MoonMail Lite Monthly',\n  callbackUrl: 'https://example.com/subscription/callback',\n  paymentCallbackUrl: 'https://example.com/payment/callback'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\CreateSubscriptionRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for creating a subscription\n$request = new CreateSubscriptionRequest([\n    'customer' => [\n        'name' => 'John Doe',\n        'email' => 'john.doe@monei.com'\n    ],\n    'amount' => 110,\n    'currency' => 'EUR',\n    'interval' => 'month',\n    'interval_count' => 1,\n    'description' => 'MoonMail Lite Monthly',\n    'callback_url' => 'https://example.com/subscription/callback',\n    'payment_callback_url' => 'https://example.com/payment/callback'\n]);\n\n// Create a subscription\n$subscription = $monei->subscriptions->create($request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import CreateSubscriptionRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.create(CreateSubscriptionRequest(\n    amount=1000,\n    currency=\"EUR\",\n    name=\"Premium Plan\",\n    interval=\"month\",\n    interval_count=1,\n    payment_method_id=\"pm_7cc38b08ff471ccd313ad62b23b9f362\",\n    customer_id=\"cus_7cc38b08ff471ccd313ad62b23b9f362\",\n    metadata={\n        \"plan\": \"premium\",\n        \"user_id\": \"user_123\"\n    }\n))\n"
          }
        ]
      }
    },
    "/subscriptions/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "get": {
        "operationId": "subscriptions_get",
        "summary": "Get Subscription",
        "description": "<p>Retrieves the complete details of an existing subscription by its unique ID.</p>\n<p>This endpoint returns comprehensive information about the subscription, including:</p>\n<ul>\n<li>Current status and lifecycle details (active, paused, canceled)</li>\n<li>Billing configuration (amount, currency, interval)</li>\n<li>Schedule information (current period, next payment date)</li>\n<li>Customer and payment method details</li>\n<li>Payment history (including last payment status)</li>\n<li>Trial period information (if applicable)</li>\n</ul>\n<p>Use this endpoint to check subscription status, verify billing details, or retrieve\ninformation needed for customer support inquiries.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.get('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa');\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->get('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa');\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.get(\"sub_7cc38b08ff471ccd313ad62b23b9f362\")\n"
          }
        ]
      },
      "put": {
        "operationId": "subscriptions_update",
        "summary": "Update Subscription",
        "description": "<p>Updates the configuration of an existing subscription.</p>\n<p><strong>Modifiable Parameters</strong>:</p>\n<ul>\n<li>Billing information (amount, description)</li>\n<li>Customer details (contact information, billing/shipping addresses)</li>\n<li>Subscription settings (cancelAtPeriodEnd, pauseAtPeriodEnd)</li>\n<li>Metadata (for your internal tracking)</li>\n</ul>\n<p><strong>Update Effects</strong>:</p>\n<ul>\n<li>Amount changes apply to the next billing cycle</li>\n<li>Customer information updates take effect immediately</li>\n<li>Setting <code>cancelAtPeriodEnd</code> to true will end the subscription after the current period</li>\n<li>Setting <code>pauseAtPeriodEnd</code> to true will pause billing after the current period</li>\n</ul>\n<p><strong>Note</strong>: Some fundamental properties cannot be changed once a subscription is created,\nincluding currency and billing interval. To modify these, you would need to cancel the\nexisting subscription and create a new one.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/UpdateSubscriptionBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.update('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa', {amount: 990});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->update(\n    '575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa',\n    ['amount' => 990]\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import UpdateSubscriptionRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.update(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\", UpdateSubscriptionRequest(amount=1500)\n)\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/activate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_activate",
        "summary": "Activate Subscription",
        "description": "<p>Activates a subscription by attaching a payment method and initiating the billing cycle.</p>\n<p><strong>Activation Process</strong>:</p>\n<ol>\n<li>This endpoint transitions a <code>PENDING</code> subscription to <code>ACTIVE</code> status</li>\n<li>An initial payment is created to validate the payment method:<ul>\n<li>For regular subscriptions: First billing cycle payment is processed immediately</li>\n<li>For trial subscriptions: A zero-amount payment is created to verify the payment method</li>\n</ul>\n</li>\n</ol>\n<p><strong>Payment Method Updates</strong>:\nIf the subscription is already active, this endpoint can be used to update the payment method.\nThe update process creates a zero-amount payment to verify the new payment method works correctly.</p>\n<p><strong>Important Notes</strong>:</p>\n<ul>\n<li>Subscription billing begins immediately upon successful activation (unless in trial period)</li>\n<li>The payment method provided will be used for all future recurring charges</li>\n<li>Activation failures (due to invalid payment method) will keep the subscription in <code>PENDING</code> status</li>\n</ul>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateSubscriptionRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/ActivateSubscriptionBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.activate('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa', {\n  paymentToken: '7cc38b08ff471ccd313ad62b23b9f362b107560b'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->activate(\n    '575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa',\n    ['paymentToken' => '7cc38b08ff471ccd313ad62b23b9f362b107560b']\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import ActivateSubscriptionRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.activate(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\",\n    ActivateSubscriptionRequest(\n        payment_method_id=\"pm_7cc38b08ff471ccd313ad62b23b9f362\"\n    ),\n)\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/cancel": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_cancel",
        "summary": "Cancel Subscription",
        "description": "<p>Cancels an active subscription, permanently stopping the billing cycle.</p>\n<p><strong>Cancellation Effects</strong>:</p>\n<ul>\n<li>The subscription status changes to <code>CANCELED</code></li>\n<li>No further charges will be processed</li>\n<li>Access to subscription services typically ends immediately or at period end (depending on your business rules)</li>\n</ul>\n<p><strong>Important Notes</strong>:</p>\n<ul>\n<li>Cancellation is permanent and cannot be undone</li>\n<li>To restart service, a new subscription must be created</li>\n<li>Consider using <code>pauseAtPeriodEnd</code> or <code>cancelAtPeriodEnd</code> for softer transitions</li>\n</ul>\n<p>Use this endpoint when a customer wishes to completely terminate their subscription.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/CancelSubscriptionBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.cancel('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa', {cancelAtPeriodEnd: true});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->cancel(\n    '575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa',\n    ['cancelAtPeriodEnd' => true]\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import CancelSubscriptionRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.cancel(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\",\n    CancelSubscriptionRequest(reason=\"Customer requested cancellation\"),\n)\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/pause": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_pause",
        "summary": "Pause Subscription",
        "description": "<p>Pauses an active subscription, temporarily halting the billing cycle.</p>\n<p><strong>Pause Effects</strong>:</p>\n<ul>\n<li>Billing is immediately suspended</li>\n<li>The subscription status changes to <code>PAUSED</code></li>\n<li>No charges will be processed while the subscription remains paused</li>\n<li>The current billing period end date remains unchanged</li>\n</ul>\n<p><strong>Use Cases</strong>:</p>\n<ul>\n<li>Temporary service interruptions</li>\n<li>Customer vacation or absence periods</li>\n<li>Account maintenance or dispute resolution</li>\n</ul>\n<p>To resume billing, use the <a href=\"#operation/subscriptions_resume\">resume endpoint</a>.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PauseSubscriptionRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/PauseSubscriptionBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei, PaymentCancellationReason} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.pause('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa', {pauseAtPeriodEnd: true});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->pause(\n    '575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa',\n    ['pauseAtPeriodEnd' => true]\n);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import PauseSubscriptionRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.pause(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\",\n    PauseSubscriptionRequest(resume_at=\"2023-12-01\"),\n)\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/resume": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_resume",
        "summary": "Resume Subscription",
        "description": "<p>Resumes a previously paused subscription, reactivating the billing cycle.</p>\n<p><strong>Resume Effects</strong>:</p>\n<ul>\n<li>Billing is immediately reactivated</li>\n<li>The subscription status changes from <code>PAUSED</code> to <code>ACTIVE</code></li>\n<li>The next billing date is recalculated based on the current date</li>\n<li>Regular charging schedule resumes according to the subscription interval</li>\n</ul>\n<p><strong>Important Notes</strong>:</p>\n<ul>\n<li>No immediate charge is created when resuming (billing continues on next scheduled date)</li>\n<li>Any pause duration is added to the current billing period, maintaining the expected number of billing cycles</li>\n<li>If a significant time has passed, verify that the payment method is still valid</li>\n</ul>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.resume('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa');\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\n\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n$monei->subscriptions->resume('575bcd84-09fc-4a6e-8c4c-f88b8eb90bfa');\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.resume(\"sub_7cc38b08ff471ccd313ad62b23b9f362\")\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/link": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_sendLink",
        "summary": "Send Subscription Link",
        "description": "<p>Sends a subscription activation link to the customer through their preferred communication channel.</p>\n<p><strong>This API can only be used for subscriptions with the following status:</strong></p>\n<ul>\n<li>Pending</li>\n</ul>\n<p><strong>Delivery channels are automatically selected based on available customer information:</strong></p>\n<ul>\n<li>If customer email is available: Link is sent via email</li>\n<li>If customer phone is available: Link is sent via WhatsApp</li>\n<li>If WhatsApp delivery fails: Link is sent via SMS as a fallback</li>\n</ul>\n<p>The subscription activation link allows customers to complete their subscription setup by providing payment details on the secure MONEI payment page. If no customer contact information is provided, the system will use the details stored in the subscription record.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSubscriptionLinkRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/SendSubscriptionLinkBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.sendLink('sub_7cc38b08ff471ccd313ad62b23b9f362', {\n  email: 'customer@example.com',\n  language: 'en'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\SendSubscriptionLinkRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for sending a subscription link\n$request = new SendSubscriptionLinkRequest([\n    'email' => 'customer@example.com',\n    'language' => 'en'\n]);\n\n// Send subscription link\n$subscription = $monei->subscriptions->sendLink('sub_7cc38b08ff471ccd313ad62b23b9f362', $request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import SendSubscriptionLinkRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.send_link(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\",\n    SendSubscriptionLinkRequest(email=\"customer@example.com\", language=\"en\"),\n)\n"
          }
        ]
      }
    },
    "/subscriptions/{id}/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/subscriptionId"
        }
      ],
      "post": {
        "operationId": "subscriptions_sendStatus",
        "summary": "Send Subscription Status",
        "description": "<p>Sends subscription status information to the customer through their preferred communication channel.</p>\n<p><strong>This API can only be used for subscriptions with the following statuses:</strong></p>\n<ul>\n<li>Active</li>\n<li>Trialing</li>\n<li>Past due</li>\n</ul>\n<p><strong>Delivery channels are automatically selected based on available customer information:</strong></p>\n<ul>\n<li>If customer email is available: Status is sent via email</li>\n<li>If customer phone is available: Status is sent via WhatsApp</li>\n<li>If WhatsApp delivery fails: Status is sent via SMS as a fallback</li>\n</ul>\n<p>The status notification includes subscription details such as current status, upcoming payments, and recent changes. If no customer contact information is provided, the system will use the details stored in the subscription record.</p>\n<p><strong>Email notifications include contextual action links based on subscription status:</strong></p>\n<ul>\n<li>For past due subscriptions: A link to reactivate the subscription</li>\n<li>For active and trialing subscriptions: A link to update the payment method</li>\n</ul>\n<p>You can specify the customer&#39;s email or phone number, the preferred communication channel (email or SMS), and the language for the message.</p>\n",
        "security": [
          {
            "APIKey": []
          }
        ],
        "tags": ["Subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSubscriptionStatusRequest"
              },
              "examples": {
                "basic": {
                  "$ref": "#/components/examples/SendSubscriptionStatusBasicRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subscription"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        },
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node",
            "source": "import {Monei} from '@monei-js/node-sdk';\n\nconst monei = new Monei('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\nmonei.subscriptions.sendStatus('sub_7cc38b08ff471ccd313ad62b23b9f362', {\n  email: 'customer@example.com',\n  language: 'en'\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\nuse Monei\\MoneiClient;\nuse Monei\\Model\\SendSubscriptionStatusRequest;\n\n// Initialize the MONEI client with your API key\n$monei = new MoneiClient('pk_test_36cf3e8a15eff3f5be983562ea6b13ec');\n\n// Create a request object for sending a subscription status\n$request = new SendSubscriptionStatusRequest([\n    'email' => 'customer@example.com',\n    'language' => 'en'\n]);\n\n// Send subscription status\n$subscription = $monei->subscriptions->sendStatus('sub_7cc38b08ff471ccd313ad62b23b9f362', $request);\n"
          },
          {
            "lang": "Python",
            "source": "import Monei\nfrom Monei import SendSubscriptionStatusRequest\n\nmonei = Monei.MoneiClient(api_key=\"pk_test_36cf3e8a15eff3f5be983562ea6b13ec\")\nmonei.subscriptions.send_status(\n    \"sub_7cc38b08ff471ccd313ad62b23b9f362\",\n    SendSubscriptionStatusRequest(email=\"customer@example.com\", language=\"en\"),\n)\n"
          }
        ]
      }
    }
  }
}
